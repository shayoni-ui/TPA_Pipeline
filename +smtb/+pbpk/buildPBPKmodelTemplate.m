function [model,nva] = buildPBPKmodelTemplate(nva)
arguments
    nva.pkmodel char {mustBeMember(nva.pkmodel,...
        {'pbpk', 'compartmental'})} = 'pbpk';
    nva.prmlimited cell = {};
    nva.acat logical = true;
    nva.pulmonary logical = false;
    nva.depot char = 'linear';
    nva.timeunit char = 'hour';
    nva.concunit char = 'nanogram/milliliter';
    nva.massunit char = 'nanogram';
    nva.doseunit char = 'milligram';
    nva.solunit char = 'milligram/milliliter';
    nva.drugs cell = {'drug'}; % seems to be not used
    nva.usetag logical = false; % seems to be not used
    nva.stoptime = 24;
end
% buildPBPKmodelTemplate constructs PBPK model like the one in gastroplus  ...
% Parameters:
%    pkmodel char = 'pbpk';
%    prmlimited cell = {};
%    acat logical = true;
%    pulmonary logical = false;
%    depot char = 'linear';
%    timeunit char = 'hour';
%    concunit char = 'nanogram/milliliter';
%    massunit char = 'nanogram';
%    doseUnit char = 'milligram';
%    solunit char = 'milligram/milliliter';
%    drugs cell = {'drug'};
%    usetag logical = false;
%
% Outputs
% 	 model: simbiology PBPK model
% 	 nva: name value arguments used to build the model and additional
% 	 information 
% Date modified: 04-Oct-2022
% File modified by SMTB user: jbp17697
% File created by SMTB user
% Examples:
%

model = sbiomodel('PK Model');

[nva] = createTissues(nva);
%disp(struct2table(tis));

configureModel(model, nva);

buildModelCompartments(model, nva);

addDrugsToModel(model, nva);

performModelCleanup(model, nva);

verify(model);

end

%%
function [nva] = createTissues(nva)
% Create the  list of tissues for the PBPK model

tis(1)  = struct('Name', 'Adipose', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(2)  = struct('Name', 'Brain', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(3)  = struct('Name', 'Gut', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Liver');
tis(4)  = struct('Name', 'Heart', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut','Venous');
tis(5)  = struct('Name', 'Kidney', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut','Venous');
tis(6)  = struct('Name', 'Liver', 'Type',...
    'PerfusionLimited','BloodIn','','BloodOut','Venous');
tis(7)  = struct('Name', 'Lung','Type', ...
    'PerfusionLimited', 'BloodIn', 'Venous', 'BloodOut', 'Arterial');
tis(8)  = struct('Name', 'Muscle', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(9)  = struct('Name', 'RedMarrow', 'Type', ...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(10) = struct('Name', 'ReproOrg', 'Type', ...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(11) = struct('Name', 'RestOfBody', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(12) = struct('Name', 'Skin', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(13) = struct('Name', 'Spleen', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Liver');
tis(14) = struct('Name', 'YellowMarrow', 'Type',...
    'PerfusionLimited', 'BloodIn', 'Arterial', 'BloodOut', 'Venous');
tis(15) = struct('Name', 'Arterial', 'Type',...
    'PassThrough', 'BloodIn','', 'BloodOut','');
tis(16) = struct('Name', 'Venous', 'Type', ...
    'PassThrough', 'BloodIn', '', 'BloodOut', '');
tis(17) = struct('Name', 'HepaticArtery','Type', ...
    'PassThrough', 'BloodIn', 'Arterial', 'BloodOut', 'Liver');


% Set the permeability limited tissues if any
if ~isempty(nva.prmlimited)
    if ~strcmpi(nva.pkmodel,'pbpk')
        warning(['Permeability limited tissues'... '
            'ignored when using compartmental PK.']);
    end
    warning('Permeability Limited Tissues Not Verified')
    % TODO: Currently assigns all tissues to be permeability limited but
    % the simbiology model is overdetermined and doest not work
    % Option includes implementation but not useful

    if length(nva.prmlimited) == 1 && strcmpi(nva.prmlimited,'all')
        [tis(1:14).Type] = deal('PermeabilityLimited');
        [tis(strcmpi({tis.BloodOut},'Liver')).BloodOut] = deal('Liver_ec');
        % Set liver blood flow to the extracellular compartmnet
    else
        [~,idx] = intersect(lower({tis.Name}),lower(nva.prmlimited));
        [tis(idx).Type] = deal('PermeabilityLimited');

        % If the liver is permeability limited, set liver blood flow
        % to the extracellular compartmnet
        if strcmpi(tis(strcmpi({tis.Name},'Liver')).Type,...
                'PermeabilityLimited')
            [tis(strcmpi({tis.BloodOut},'Liver')).BloodOut] =...
                deal('Liver_ec');
        end

        % Check for unidenfiable permeaiblity limited tissues
        errTis = setdiff(lower(nva.prmlimited),lower({tis.Name}));
        if ~isempty(errTis)
            error('Unrecognized permeability limtied tissue: %s',...
                errTis{:});
        end
    end
end

nva.tissues = tis;

end

function configureModel(model, nva)
model.ConfigSet.TimeUnit = nva.timeunit;
model.ConfigSet.StopTime = nva.stoptime;
model.ConfigSet.CompileOptions.UnitConversion = true;
model.ConfigSet.SolverOptions.AbsoluteTolerance = 1E-8;
model.ConfigSet.SolverOptions.RelativeTolerance = 1E-6;
end

function buildModelCompartments(model,nva)

% Parameter to be used for mg/kg dosing
addparameter(model,'wgt','Value',0,'ValueUnits','kilogram');


% Parameter to be used for converting to ng/mL when using
% micromole/liter as drug species

addparameter(model,'mw','Value',0,'ValueUnits','gram/mole');

% Add PK compartments for compartmental or PBPK
addcompartment(model,'blood',  'Capacity',1,...
    'CapacityUnits', 'milliliter');
%Blood concentration set using assingment rule,
% compartment volume doesn't matter
addcompartment(model,'plasma', 'Capacity',1,  ...
    'CapacityUnits', 'milliliter'); %Plasma concentration set
% using assingment rule, compartment volume doesn't matter
addcompartment(model,'Depot',  'Capacity',1, ...
    'CapacityUnits', 'milliliter');

switch nva.pkmodel
    case 'compartmental'
        % Central/peripharl compartments need to be added
        % on a per compound basis
        % Prevents peripheral compartment volume
        % from being inf if k12 or k13 = 0;
        addparameter(model, 'dV', ...
            'Value',1E-40,  'ValueUnits','1/hour');
        % Prevents peripheral compartment volume from being inf if
        % k12 or k13 = 0;
        addparameter(model, 'Vmin', 'Value',1E-50,...
            'ValueUnits','1/hour');
        % Hepatic blood flow, used for calculating FPE
        addparameter(model, 'Q_h',  'Value',1E-40,...
            'ValueUnits','liter/minute');
        addcompartment(model,'Gut', 'Capacity',1,...
            'CapacityUnits', 'milliliter');
        addcompartment(model,'Liver', 'Capacity',1,...
            'CapacityUnits', 'milliliter');
        addparameter(model, 'Q_Gut', 'Value',1,...
            'ValueUnits','milliliter/second');
        addparameter(model, 'Q_Liver',   'Value',1,...
            'ValueUnits','milliliter/second');
    case 'pbpk'
        % Add tissues and associated parameters, rules, and reactions
        addparameter(model,'GFR','Value',0,'ValueUnits', ...
            'milliliter/second');
        tis = nva.tissues;
        for i = 1:length(tis)
            tn = tis(i).Name;
            if ~isempty(tis(i).BloodIn) || ~isempty(tis(i).BloodOut)
                addparameter(model, ['Q_' tn],'Value',0,...
                    'ValueUnits','milliliter/second');
            end
            switch lower(tis(i).Type)
                case {'perfusionlimited','passthrough'}
                    addcompartment(model,tn,'Capacity',1, ...
                        'CapacityUnits','milliliter');
                case 'permeabilitylimited'
                    addcompartment(model,tn,        'Capacity',1, ...
                        'CapacityUnits','milliliter');
                    addcompartment(model,[tn '_ec'],'Capacity', ...
                        1,'CapacityUnits','milliliter');
                    addcompartment(model,[tn '_ic'],'Capacity', ...
                        1,'CapacityUnits','milliliter');

                    addparameter(model, sprintf('Fvs_%s',tn), ...
                        'Value', 0.05,  'ValueUnits','dimensionless');
                    addparameter(model, sprintf('Fec_%s',tn),  ...
                        'Value', 1E-40, 'ValueUnits','dimensionless');

                    addrule(model, ...
                        sprintf('%s_ec = (Fec_%s + Fvs_%s) * %s', ...
                        tn,tn,tn,tn),    'RuleType','InitialAssignment');
                    addrule(model, ...
                        sprintf('%s_ic = (1 - Fvs_%s - Fec_%s) * %s', ...
                        tn,tn,tn,tn),'RuleType','InitialAssignment');

                otherwise, error('Invalid tissue type: %s',tis(i).Type)
            end
        end
end

%% Add ACAT compartments if ACAT is on
if nva.acat
    acat_cmpt = {'Stomach','Duodenum','Jejunum1','Jejunum2',...
        'Ileum1','Ileum2','Ileum3','Caecum','Colon','Excreted'};
    for i = 1:length(acat_cmpt)
        addcompartment(model,acat_cmpt{i},'Capacity',1, ...
            'CapacityUnits','milliliter');
    end

    for i = 1:length(acat_cmpt)-1
        addcompartment(model,sprintf('%s_ent',acat_cmpt{i}),    ...
            'Capacity', 1,      'CapacityUnits','milliliter');
        addparameter(model,sprintf('TT_%s',acat_cmpt{i}),      ...
            'Value',    1E3,    'ValueUnits',   'hour');
        %         addparameter(model,sprintf('k_bas_%s_drug',acat_cmpt{i}),
        % 'Value',    3.7,    'ValueUnits',   'dimensionless');
    end

    %     addparameter(model,'k_bas','Value',3.7,
    % 'ValueUnits','dimensionless');
    %     addparameter(model,'h_max','Value',30,
    % 'ValueUnits', 'micrometer');   % Maximum diffusion layer thickness
end

%% Add pulmonary compartments if pulmonary is on
if nva.pulmonary

    addcompartment(model,'Inhaled','Capacity',1,'CapacityUnits','liter');
    addparameter(model,'k_inhale','Value', 1E3, 'ValueUnits','1/hour');
    % Sys Abs Rate Const
    addparameter(model,'SARC_drug', 'Value',0,'ValueUnits','1/second');

    lu_cmpt = {'Nose','Extrathoracic','Thoracic','Bronchiolar','Alveolar'};
    for i = 1:length(lu_cmpt)
        addcompartment(model,sprintf('%s_mu',lu_cmpt{i}),'Capacity',1,  ...
            'CapacityUnits', 'milliliter');
        addcompartment(model,sprintf('%s_cell', lu_cmpt{i}), ...
            'Capacity',1,    'CapacityUnits', 'milliliter');
        addcompartment(model,sprintf('%s_lys', lu_cmpt{i}), ...
            'Capacity',0.1,  'CapacityUnits', 'milliliter');
        % permeability
        addparameter(model,sprintf('Prm_%s_drug', lu_cmpt{i}), ...
            'Value',0,'ValueUnits','centimeter/second');
        % surface area
        addparameter(model,sprintf('SA_%s', lu_cmpt{i}), ...
            'Value',0,'ValueUnits','centimeter^2');
        % cell thickness
        addparameter(model,sprintf('Th_%s', lu_cmpt{i}), ...
            'Value',0,'ValueUnits','centimeter');
        % mucociliary transit time
        addparameter(model,sprintf('MTT_%s', lu_cmpt{i}),'Value',1, ...
            'ValueUnits','hour');

    end


    %     addcompartment(model,'lung','Capacity',1,'CapacityUnits',
    % 'milliliter'); %Represents all lung tissue that isn't enteroctyes
    %
    % Lung data-matching compartments
    addcompartment(model,'LungHomogenate','Capacity',1, ...
        'CapacityUnits','milliliter');
    addcompartment(model,'GPPulmonary', 'Capacity',1, ...
        'CapacityUnits','milliliter'); %Gastroplus pumonary concentration
    addcompartment(model,'BAL', 'Capacity',1, ...
        'CapacityUnits','milliliter');
    addcompartment(model,'ELF','Capacity',1, ...
        'CapacityUnits','milliliter');

    addrule(model, ['LungHomogenate = Lung + Alveolar_cell +',...
        'Bronchiolar_cell + Thoracic_cell'], ...
        'RuleType','initialAssignment');
end
end

function addDrugToModel(model,nva)

switch lower(nva.pkmodel)
    case 'compartmental', central = 'central_drug';
    case 'pbpk',          central = 'Venous';
end

%PK-specific species
addspecies(sbioselect(model,'Type','Compartment','Name','Depot'),  ...
    'drug', 'InitialAmount',0, 'InitialAmountUnits', nva.concunit);
addspecies(sbioselect(model,'Type','Compartment','Name','blood'), ...
    'drug', 'InitialAmount',0,  'InitialAmountUnits', nva.concunit);
addspecies(sbioselect(model,'Type','Compartment','Name','plasma'),  ...
    'drug', 'InitialAmount',0,  'InitialAmountUnits', nva.concunit);

%add PK parameters
addparameter(model, 'B2P_drug', 'Value',1,'ValueUnits','dimensionless');
addparameter(model, 'fup_drug', 'Value',1, 'ValueUnits','dimensionless');
addparameter(model, 'ka_drug',  'Value',1, 'ValueUnits','1/hour');
addparameter(model, 'F_drug',   'Value',1, 'ValueUnits','dimensionless');

%% Add the drug to the distribution compartments
switch lower(nva.pkmodel)
    case 'compartmental'

        ce = addcompartment(model,'central_drug',   ...
            'Capacity',1,   'CapacityUnits', 'liter');
        p1 = addcompartment(model,'peripheral1_drug', ...
            'Capacity',1,   'CapacityUnits', 'liter');
        p2 = addcompartment(model,'peripheral2_drug', ...
            'Capacity',1,   'CapacityUnits', 'liter');


        addspecies(p1, 'drug',     ...
            'InitialAmount',0,  'InitialAmountUnits', nva.concunit);
        addspecies(p2, 'drug',    ...
            'InitialAmount',0,  'InitialAmountUnits', nva.concunit);
        addspecies(ce, 'drug',   ...
            'InitialAmount',0,  'InitialAmountUnits', nva.concunit);
        addspecies(sbioselect(model,'type','compartment','name','Gut'), ...
            'drug','InitialAmount',0,'InitialAmountUnits', nva.concunit);
        addspecies(sbioselect(model,'type','compartment','name','Liver'), ...
            'drug','InitialAmount',0,'InitialAmountUnits', nva.concunit);

        addparameter(model, 'CL_drug',   'Value',1,     ...
            'ValueUnits','liter/hour');
        addparameter(model, 'k12_drug',  'Value',0,  ...
            'ValueUnits','1/hour');
        addparameter(model, 'k21_drug',  'Value',0,  ...
            'ValueUnits','1/hour');
        addparameter(model, 'k13_drug',  'Value',0,  ...
            'ValueUnits','1/hour');
        addparameter(model, 'k31_drug',  'Value',0,  ...
            'ValueUnits','1/hour');
        addparameter(model, 'Q12_drug',  'Value',0, ...
            'ValueUnits','liter/hour');
        addparameter(model, 'Q13_drug',  'Value',0,    ...
            'ValueUnits','liter/hour');

        addreaction(model,'central_drug.drug <-> peripheral1_drug.drug', ...
            'Name','2-Compartment PK for Drug',  ...
            'ReactionRate',['Q12_drug * (central_drug.drug -'...
            'peripheral1_drug.drug)']);
        addreaction(model,  'central_drug.drug <-> peripheral2_drug.drug', ...
            'Name','3-Compartment PK for Drug', ...
            'ReactionRate',['Q13_drug * (central_drug.drug -'...
            'peripheral2_drug.drug)']);
        addreaction(model,'central_drug.drug -> null','Name', ...
            'Clearance for Drug','ReactionRate', ...
            'CL_drug  * central_drug.drug ');


        addrule(model,'Q12_drug = k12_drug * central_drug', ...
            'RuleType', 'initialassignment');
        addrule(model,'Q13_drug = k13_drug * central_drug',     ...
            'RuleType', 'initialassignment');
        addrule(model,['peripheral1_drug = (k21_drug + Vmin)/',...
            '(k12_drug + dV) * central_drug'], ...
            'RuleType','initialassignment');
        addrule(model,['peripheral2_drug = (k31_drug + Vmin)/' ...
            '(k13_drug + dV) * central_drug'], ...
            'RuleType','initialassignment');
        addrule(model, 'plasma.drug = central_drug.drug', ...
            'RuleType','repeatedassignment');
        addrule(model, 'blood.drug = central_drug.drug * B2P_drug',  ...
            'RuleType','repeatedassignment');

        adddose(model,sbiodose('IV','Target','central_drug.drug', ...
            'Amount',0,'AmountUnits',nva.doseunit, ...
            'TimeUnits','hour','RateUnits',cat(2,nva.doseunit,'/hour')));
    case 'pbpk'

        tis = nva.tissues;

        % Add drug species to tissues
        for i = 1:length(tis)
            addspecies(sbioselect(model,'type', ...
                'compartment','name',tis(i).Name), ...
                'drug','InitialAmount',0,'InitialAmountUnits', ...
                nva.concunit);
            if strcmpi(tis(i).Type,'PermeabilityLimited')
                addspecies(sbioselect(model,'type','compartment', ...
                    'name',[tis(i).Name '_ec']),'drug', ...
                    'InitialAmount',0,'InitialAmountUnits',nva.concunit);
                addspecies(sbioselect(model,'type','compartment', ...
                    'name',[tis(i).Name '_ic']),'drug','InitialAmount',0, ...
                    'InitialAmountUnits',nva.concunit);
            end
        end

        if ~isempty(nva.prmlimited)
            addparameter(model,'PS_drug',        'Value',0, ...
                'ValueUnits','milliliter/second/milliliter');
            addparameter(model,'f_un_pH74_drug', 'Value',1, ...
                'ValueUnits','dimensionless');
            addparameter(model,'f_un_pH7_drug',  'Value',1, ...
                'ValueUnits','dimensionless');
        end

        % Add parameters and reactions to tissues
        for i = 1:length(tis)
            tn  = tis(i).Name;
            in  = tis(i).BloodIn;
            out = tis(i).BloodOut;

            switch tis(i).Type
                case 'PerfusionLimited'
                    addparameter(model, sprintf('Kp_%s_drug',tn), ...
                        'Value', 1, 'ValueUnits', 'dimensionless');
                    addparameter(model, sprintf('CLint_%s_drug',tn), ...
                        'Value', 0, 'ValueUnits', 'liter/hour');
                    if ~isempty(in)
                        addreaction(model, ...
                            sprintf('%s.drug -> %s.drug',in,tn), ...
                            'Name',sprintf('%s_%s for Drug',in,tn), ...
                            'ReactionRate',sprintf('Q_%s*%s.drug',tn,in));
                    end
                    if ~isempty(out)
                        addreaction(model, ...
                            sprintf('%s.drug -> %s.drug',tn,out), ...
                            'Name',sprintf('%s_%s for Drug',tn,out), ...
                            'ReactionRate',sprintf(['Q_%s*%s.drug*B2P_drug/' ...
                            'Kp_%s_drug'],tn,tn,tn));
                    end
                    addreaction(model, sprintf('%s.drug -> null',tn), ...
                        'Name',sprintf('%s_eli for Drug',tn),  ...
                        'ReactionRate',sprintf(['CLint_%s_drug*%s.drug*' ...
                        'fup_drug/Kp_%s_drug'],tn,tn,tn));
                case 'PermeabilityLimited'
                    addparameter(model, sprintf('Kp_%s_drug',tn),  ...
                        'Value', 1, 'ValueUnits', 'dimensionless');
                    addparameter(model, sprintf('CLint_%s_drug',tn), ...
                        'Value', 0, 'ValueUnits', 'liter/hour');
                    addparameter(model, sprintf('fut_%s_drug',tn), ...
                        'Value', 1,'ValueUnits','dimensionless');
                    if ~isempty(in)
                        addreaction(model, ...
                            sprintf('%s.drug -> %s_ec.drug',in,tn),  ...
                            'Name',sprintf('%s_%s for Drug',in,tn),  ...
                            'ReactionRate',sprintf('Q_%s*%s.drug',tn,in));
                    end
                    if ~isempty(out)
                        addreaction(model, ...
                            sprintf('%s_ec.drug -> %s.drug',tn,out),  ...
                            'Name',sprintf('%s_%s for Drug',tn,out), ...
                            'ReactionRate',sprintf(['Q_%s*%s_ec.drug*' ...
                            'B2P_drug/Kp_%s_drug'],tn,tn,tn));
                    end
                    addreaction(model, sprintf('%s_ec.drug <-> %s_ic.drug', ...
                        tn,tn),  'Name',sprintf('%s_perm for Drug',tn), ...
                        'ReactionRate',sprintf(['PS_drug *' ...
                        '(1-Fec_%s-Fvs_%s) * %s *(fup_drug /Kp_%s_drug * ' ...
                        'f_un_pH74_drug * %s_ec.drug - fut_%s_drug *' ...
                        ' f_un_pH7_drug * %s_ic.drug)'],tn,tn,tn, ...
                        tn,tn,tn,tn)); %fut extracellular = fup/Kp,
                    % per equation 4-68b of Gastroplus manual v9
                    addreaction(model, sprintf('%s_ic.drug -> null',tn),            'Name',sprintf('%s_eli for Drug',tn),    'ReactionRate',sprintf('fut_%s_drug*CLint_%s_drug*%s_ic.drug',tn,tn,tn));
                    addrule(model, ...
                        sprintf(['%s.drug = (%s_ec * %s_ec.drug + %s_ic *' ...
                        ' %s_ic.drug)/%s'], tn,tn,tn,tn,tn,tn), ...
                        'RuleType','RepeatedAssignment');
                case 'PassThrough'
                    if ~isempty(in)
                        addreaction(model, ...
                            sprintf('%s.drug -> %s.drug',in,tn), ...
                            'Name',sprintf('%s_%s for Drug',in,tn),  ...
                            'ReactionRate',sprintf('Q_%s*%s.drug',tn,in));
                    end
                    if ~isempty(out)
                        addreaction(model, ...
                            sprintf('%s.drug -> %s.drug',tn,out), ...
                            'Name',sprintf('%s_%s for Drug',tn,out), ...
                            'ReactionRate',sprintf('Q_%s*%s.drug',tn,tn));
                    end
                otherwise, error('Unrecognized tissue type')
            end
        end

        addparameter(model','CL_ot_drug','Value',0, ...
            'ValueUnits','liter/hour');
        addreaction(model,  'Venous.drug -> null', ...
            'Name','General Clearance for Drug', ...
            'ReactionRate','CL_ot_drug * Arterial.drug/B2P_drug');

        addrule(model, 'blood.drug = Venous.drug',      ...
            'RuleType','repeatedassignment');
        addrule(model, 'plasma.drug = Venous.drug/B2P_drug', ...
            'RuleType','repeatedassignment');

        adddose(model,sbiodose('IV','Target','Venous.drug', ...
            'Amount',0,'AmountUnits',nva.doseunit, ...
            'TimeUnits','hour','RateUnits',cat(2,nva.doseunit,'/hour')));
end

%% Add absorption from depot (for SC injection or simplified oral)
switch lower(nva.depot)
    case 'linear'
        absrate = 'ka_drug * Depot.drug';
    case 'saturable'
        addparameter(model,'Abs_max_drug', ...
            'Value',1E6, 'ValueUnits', ...
            sprintf('%s/%s',nva.massunit,nva.timeunit));
        absrate = ['ka_drug * Abs_max_drug * Depot.drug /' ...
            ' (Abs_max_drug + ka_drug * Depot.drug)'];
    case 'saturable_steep'
        addparameter(model,'Abs_max_drug',   'Value',1E6,    ...
            'ValueUnits',sprintf('%s/%s',nva.massunit,nva.timeunit));
        absrate = [' Abs_max_drug * (ka_drug * Depot.drug)^6 /' ...
            ' (Abs_max^6 + (ka_drug * Depot.drug)^6)'];
    case 'precipitation'
        addparameter(model,'Depot_Solubility_drug', 'Value',  1, ...
            'ValueUnits',nva.solunit);
        addparameter(model,'t_precip_drug','Value',  1, ...
            'ValueUnits','second');
        addparameter(model,'t_diss_drug','Value',900, ...
            'ValueUnits','second');
        addparameter(model,'abovesolubility_drug','Value',0,     ...
            'ValueUnits','dimensionless','Constant',false);
        addrule(model,['abovesolubility_drug = Depot.drug > ' ...
            'Depot_Solubility'], 'RuleType','repeatedAssignment');

        addspecies(sbioselect(model,'type','compartment','name','Depot'), ...
            'particles','InitialAmount',0,'InitialAmountUnits', ...
            nva.concunit);

        addreaction(model,'Depot.drug -> Depot.particles','Name', ...
            'SC Precipitation for Drug','ReactionRate', ...
            ['0.6931/t_precip_drug * (Depot.drug - Depot_Solubility_drug)' ...
            ' * abovesolubility_drug']);
        addreaction(model,'Depot.particles -> Depot.drug','Name', ...
            'SC Dissolution for Drug','ReactionRate', ...
            ['0.6931/t_diss_drug * (Depot_Solubility - Depot.drug) *' ...
            'Depot.particles/(Depot_Solubility_drug/100 + ' ...
            'Depot.particles)']);
        absrate = 'ka_drug * Depot.drug';
    otherwise
        error(['Invalid depot option, please select "linear",' ...
            ' "saturable", or "precipitation"'])
end

addreaction(model,  sprintf('Depot.drug -> %s.drug',central), ...
    'Name','SC Absorption for Drug',  ...
    'ReactionRate',sprintf('F_drug * %s',absrate));
addreaction(model,  'Depot.drug -> null',                ...
    'Name','SC Degradation for Drug',    ...
    'ReactionRate',sprintf('(1-F_drug) * %s',absrate));

adddose(model,sbiodose('SC','Target','Depot.drug','Amount',0, ...
    'AmountUnits',nva.doseunit,'TimeUnits','hour', ...
    'RateUnits',cat(2,nva.doseunit,'/hour')));

%% Add drug to ACAT model
if nva.acat || nva.pulmonary
    cmpt = {'Stomach','Duodenum','Jejunum1','Jejunum2','Ileum1',...
        'Ileum2','Ileum3','Caecum','Colon','Excreted'};

    %Add species and parameters
    for i = 1:length(cmpt)
        addspecies(sbioselect(model,'type','compartment','name',cmpt{i}), ...
            'particles','InitialAmount',0, ...
            'InitialAmountUnits',nva.concunit);
        addspecies(sbioselect(model,'type','compartment','name',cmpt{i}), ...
            'drug','InitialAmount',0,'InitialAmountUnits',nva.concunit);
    end

    for i = 1:length(cmpt)-1
        addspecies(sbioselect(model,'type','compartment', ...
            'name',[cmpt{i} '_ent']),'drug','InitialAmount',0, ...
            'InitialAmountUnits',nva.concunit);
        addparameter(model,sprintf('ASF_%s_drug',cmpt{i}),  ...
            'Value',0,  'ValueUnits','1/centimeter');
        addparameter(model,sprintf('ASF_para_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits','1/centimeter');
        addparameter(model,sprintf('Peff_trans_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits','centimeter/second');
        addparameter(model,sprintf('Peff_para_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits','centimeter/second');
        addparameter(model,sprintf('solubility_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits',nva.solunit);
        % addparameter(model,sprintf('solubility_%s_drug',cmpt{i}),
        % 'Value',0,  'ValueUnits',nva.ConcUnit);
        addparameter(model,sprintf('Deff_%s_drug',cmpt{i}),     ...
            'Value',1E-5,'ValueUnits','centimeter^2/second');
        % Effective diffusion coefficient specific to each GI compartment
        addparameter(model,sprintf('above_solubility_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits','dimensionless','Constant',false);
        addparameter(model,sprintf('below_solubility_%s_drug',cmpt{i}), ...
            'Value',0,  'ValueUnits','dimensionless','Constant',false);
        addparameter(model,sprintf('k_bas_%s_drug',cmpt{i}),     ...
            'Value', 3.7, 'ValueUnits', 'dimensionless');
    end

    addparameter(model,'Peff_drug','Value',0.446/1E4,'ValueUnits', ...
        'centimeter/second');
    addparameter(model,'f_fpe_drug','Value',0,['' ...
        'ValueUnits'],'dimensionless');
    addparameter(model,'gut_fpe_drug','Value',0, ...
        'ValueUnits','dimensionless');
    switch lower(nva.concunit)
        case 'micromole/liter'
            addparameter(model,'rho_drug', ...
                'Value',1.2,'ValueUnits','mole/milliliter');                     % Particle density
        otherwise
            addparameter(model,'rho_drug', 'Value',1.2, ...
                'ValueUnits', 'gram/milliliter');
            % Particle density
    end
    addparameter(model,'h_drug','Value',25,'ValueUnits', 'micrometer', ...
        'constant',false);
    % Diffusion layer thickenss (~equal to particle radius up to 30 um)
    addparameter(model,'r_drug','Value',25,'ValueUnits', 'micrometer', ...
        'constant',false);
    % Particle radius
    addparameter(model,'s_drug', 'Value',1,'ValueUnits','dimensionless');
    % Particle shape factor
    addparameter(model,'t_precip_drug', 'Value',900, 'ValueUnits', ...
        'second');
    % Precipitation time
    addparameter(model,'Deff_drug','Value',1E-5,'ValueUnits', ...
        'centimeter^2/second');
    % Diffusion coefficient
    addparameter(model,'fu_ent_drug','Value',1,'ValueUnits', ...
        'dimensionless');
    % Fraction unbound in enterocytes
    addparameter(model,'h_max_drug','Value',30,'ValueUnits', ...
        'micrometer');
    % Maximum diffusion layer thickness

    addrule(model,['h_drug = r_drug - (r_drug - h_max_drug) *' ...
        ' r_drug^50/((0.96*h_max_drug)^50 + r_drug^50)'], ...
        'RuleType','RepeatedAssignment');
    % Calculate diffusion layer thickness

    if strcmpi(nva.pkmodel,'compartmental')
        addparameter(model,'C_HPV_drug','Value',0, ...
            'ValueUnits',nva.concunit,'ConstantValue',false);
        % Calculated concentraiton in the hepatic portal vein
        addrule(model, 'f_fpe = CL_drug / (Q_h * B2P_drug)',  ...
            'RuleType','initialassignment');
        %         addrule(model, 'f_fpe = CL_drug / (Q_Liver * B2P_drug)',
        % 'RuleType','initialassignment');
        addrule(model,'C_HPV_drug = central.drug / (1 - f_fpe_drug)', ...
            'RuleType','repeatedassignment');
        % Calculated concentraiton in the hepatic portal vein
    end

    % Add transit and absorption reactions
    for i = 1:length(cmpt)-1
        addrule(model,sprintf(['above_solubility_%s_drug = %s.drug ' ...
            '> solubility_%s_drug'],cmpt{i},cmpt{i},cmpt{i}), ...
            'RuleType','RepeatedAssignment');
        % Logical to prevent negative value in precipitation model
        addrule(model,sprintf(['below_solubility_%s_drug = %s.drug ' ...
            '< solubility_%s_drug'],cmpt{i},cmpt{i},cmpt{i}), ...
            'RuleType','RepeatedAssignment');
        % Logical to prevent negative value in dissolution model
        addreaction(model, sprintf('%s.particles -> %s.particles', ...
            cmpt{i},cmpt{i+1}),'Name', ...
            sprintf('%s Particle GI Transit for Drug',cmpt{i}),  ...
            'ReactionRate',sprintf('%s.particles*%s/TT_%s', ...
            cmpt{i},cmpt{i},cmpt{i}));
        addreaction(model, sprintf('%s.drug -> %s.drug',cmpt{i},cmpt{i+1}),     'Name',sprintf('%s Dissolved GI Transit for Drug',cmpt{i}), 'ReactionRate',sprintf('%s.drug/TT_%s',cmpt{i},cmpt{i}));
        addreaction(model, sprintf('%s.particles -> %s.drug', ...
            cmpt{i},cmpt{i}),'Name',sprintf('%s Dissolution for Drug', ...
            cmpt{i}),'ReactionRate',sprintf(['Deff_%s_drug/' ...
            '(rho_drug*h_drug*r_drug) * (1+2*s_drug)/s_drug * ' ...
            '((solubility_%s_drug-%s.drug)*below_solubility_%s_drug) *' ...
            ' (%s.particles*%s)'],cmpt{i},cmpt{i},cmpt{i},cmpt{i}, ...
            cmpt{i},cmpt{i}));
        addreaction(model, sprintf('%s.drug -> %s.particles', ...
            cmpt{i},cmpt{i}),'Name', ...
            sprintf('%s Precipitation for Drug',cmpt{i}), ...
            'ReactionRate',sprintf(['(1/t_precip_drug) *' ...
            ' ((%s.drug-solubility_%s_drug)*above_solubility_%s_drug)'], ...
            cmpt{i},cmpt{i},cmpt{i}));
        addreaction(model, sprintf('%s.drug <-> %s_ent.drug', ...
            cmpt{i},cmpt{i}),'Name',sprintf('%s Enterocyte cmpts for Drug', ...
            cmpt{i}),'ReactionRate',sprintf(['Peff_trans_%s_drug * ' ...
            'ASF_%s_drug * %s * (%s.drug - fu_ent_drug * %s_ent.drug)'], ...
            cmpt{i},cmpt{i},cmpt{i},cmpt{i},cmpt{i}));

        switch lower(nva.pkmodel)
            case 'compartmental'
                gut = 'Gut';

                addreaction(model,sprintf('%s_ent.drug <-> %s.drug', ...
                    cmpt{i},gut),'Name', ...
                    sprintf('%s Transcellular Abs for Drug',cmpt{i}), ...
                    'ReactionRate',sprintf(['k_bas_%s_drug * ' ...
                    'Peff_trans_%s_drug * ASF_%s_drug * %s * ' ...
                    '(1 - gut_fpe_drug) * (fu_ent_drug * %s_ent.drug -' ...
                    ' fup_drug * %s.drug)'],cmpt{i},cmpt{i},cmpt{i}, ...
                    cmpt{i},cmpt{i},gut));
                addreaction(model,sprintf('%s_ent.drug -> null',cmpt{i}), ...
                    'Name',sprintf(['%s Transcellular Sys F gut extraction' ...
                    ' for Drug'],cmpt{i}),'ReactionRate', ...
                    sprintf(['k_bas_%s_drug * Peff_trans_%s_drug * ' ...
                    'ASF_%s_drug  * %s  * gut_fpe_drug * ' ...
                    '(fu_ent_drug * %s_ent.drug - fup_drug * %s.drug)'], ...
                    cmpt{i},cmpt{i},cmpt{i},cmpt{i},cmpt{i},gut));
                addreaction(model, sprintf('%s.drug <-> %s.drug', ...
                    cmpt{i},gut), 'Name', ...
                    sprintf('%s Paracellular Abs for Drug',cmpt{i}), ...
                    'ReactionRate',sprintf(['ASF_para_%s_drug * ' ...
                    'Peff_para_%s_drug * %s * ' ...
                    '(%s.drug - fup_drug * %s.drug)'],cmpt{i},cmpt{i}, ...
                    cmpt{i},cmpt{i},gut));
            case 'pbpk'
                if sum(strcmpi(nva.prmlimited,'Gut')), gut = 'Gut_ec';
                else,                                      gut = 'Gut';
                end
                addreaction(model, sprintf('%s_ent.drug <-> %s.drug', ...
                    cmpt{i},gut), 'Name',sprintf(['%s Transcellular Sys Abs' ...
                    ' for Drug'],cmpt{i}),'ReactionRate', ...
                    sprintf(['k_bas_%s_drug * Peff_trans_%s_drug * ' ...
                    'ASF_%s_drug * %s * (1-gut_fpe_drug) * ' ...
                    '(fu_ent_drug * %s_ent.drug - fup_drug * %s.drug)'], ...
                    cmpt{i},cmpt{i},cmpt{i},cmpt{i},cmpt{i},gut));
                addreaction(model, sprintf('%s_ent.drug -> null',cmpt{i}), ...
                    'Name',sprintf(['%s Transcellular Sys F gut extraction' ...
                    ' for Drug'],cmpt{i}),'ReactionRate', ...
                    sprintf(['k_bas_%s_drug * Peff_trans_%s_drug * ' ...
                    'ASF_%s_drug  * %s  * gut_fpe_drug * ' ...
                    '(fu_ent_drug * %s_ent.drug - fup_drug * %s.drug)'], ...
                    cmpt{i},cmpt{i},cmpt{i},cmpt{i},cmpt{i},gut));
                addreaction(model, sprintf('%s.drug <-> %s.drug', ...
                    cmpt{i},gut), 'Name',sprintf(['%s Paracellular Sys Abs' ...
                    ' for Drug'],cmpt{i}),'ReactionRate', ...
                    sprintf(['ASF_para_%s_drug * Peff_para_%s_drug * %s * ' ...
                    '(%s.drug - fup_drug * %s.drug)'],cmpt{i},cmpt{i}, ...
                    cmpt{i},cmpt{i},gut));
        end
    end

    % add reactions for systemic circulation for compartmental PKf_fpe_drug
    if strcmpi(nva.pkmodel,'compartmental')
        addreaction(model, 'Gut.drug -> Liver.drug', ...
            'Name', 'Gut_Liver Abs for Drug','ReactionRate', ...
            'Q_Gut * Gut.drug * B2P_drug');
        addreaction(model, sprintf('Liver.drug -> %s.drug',central),    ...
            'Name', 'Systemic Abs for Drug', 'ReactionRate', ...
            'Q_Liver * Liver.drug * B2P_drug * (1 - f_fpe_drug)');
        addreaction(model, 'Liver.drug -> null',            ...
            'Name', 'Liver FPE', 'ReactionRate', ...
            'Q_Liver * Liver.drug * B2P_drug * f_fpe_drug');
    end

    adddose(model,sbiodose('PO','Target','Stomach.particles', ...
        'Amount',0,'AmountUnits',nva.doseunit,'TimeUnits','hour', ...
        'RateUnits',cat(2,nva.doseunit,'/hour')));
end


%% Add drug to pumonary model
if nva.pulmonary
    % Lung specific compartmnes
    lu_cmpt = {'Nose','Extrathoracic','Thoracic','Bronchiolar','Alveolar'};
    mu_out  = {'Extrathoracic_mu.drug','Stomach.drug',...
        'Extrathoracic_mu.drug','Thoracic_mu.drug','Bronchiolar_mu.drug'};
    pt_out  = {'Extrathoracic_mu.particles','Stomach.drug',...
        'Extrathoracic_mu.particles','Thoracic_mu.particles',...
        'Bronchiolar_mu.particles'};

    addparameter(model,'fu_lungcell_drug', 'Value',1,  'ValueUnits', ...
        'dimensionless');
    addparameter(model,'fu_mucus_drug',    'Value',1,  'ValueUnits', ...
        'dimensionless');
    addparameter(model,'k_release_drug',   'Value',50, 'ValueUnits', ...
        '1/hour');
    % 1st order particle release (need to add dissolution algorithm)

    addspecies(sbioselect(model,'type','compartment','name','Inhaled'), ...
        'particles',  'InitialAmount',0,  ...
        'InitialAmountUnits',nva.concunit);
    addspecies(sbioselect(model,'type','compartment','name','Inhaled'), ...
        'solution',   'InitialAmount',0, ...
        'InitialAmountUnits',nva.concunit);

    for i = 1:length(lu_cmpt)
        nm = lu_cmpt{i};
        addspecies(sbioselect(model,'type','compartment','name', ...
            [nm '_mu']),  'particles',   'InitialAmount',0, ...
            'InitialAmountUnits',nva.concunit);
        addspecies(sbioselect(model,'type','compartment','name', ...
            [nm '_mu']),  'drug',   'InitialAmount',0,  ...
            'InitialAmountUnits',nva.concunit);
        addspecies(sbioselect(model,'type','compartment','name', ...
            [nm '_cell']),'drug',   'InitialAmount',0,  ...
            'InitialAmountUnits',nva.concunit);

        addparameter(model,sprintf('Dep_%s',nm),        'Value',0, ...
            'ValueUnits','dimensionless');
        % Fraction of dose deposited
        addparameter(model,sprintf('CLint_%s_drug',nm), 'Value',0, ...
            'ValueUnits','liter/hour');
        % Intrinsic clerance from the lung compartments
    end

    for i = 1:length(lu_cmpt)
        nm = lu_cmpt{i};
        addreaction(model, ...
            sprintf('Inhaled.particles -> %s_mu.particles',nm),  ...
            'Name',sprintf('Drug Particle Deposition in %s',nm),    ...
            'ReactionRate','k_inhale * Inhaled.particles');
        addreaction(model, sprintf('Inhaled.solution -> %s_mu.drug',nm), ...
            'Name',sprintf('Drug Solution Deposition in %s',nm),   ...
            'ReactionRate','k_inhale * Inhaled.solution');
        addreaction(model, sprintf('%s_mu.particles -> %s_mu.drug',nm,nm), ...
            'Name',sprintf('%s Dissolution in ELF for Drug',nm), ...
            'ReactionRate',sprintf('k_release_drug * %s_mu.particles',nm));
        addreaction(model, sprintf('%s_mu.drug <-> %s_cell.drug',nm,nm), ...
            'Name',sprintf('%s Lung Permeation for Drug',nm),     ...
            'ReactionRate',sprintf(['Prm_%s_drug*SA_%s*(fu_mucus_drug *' ...
            ' %s_mu.drug - fu_lungcell_drug * %s_cell.drug)'], ...
            nm,nm,nm,nm));
        addreaction(model, sprintf('%s_mu.drug -> %s',nm,mu_out{i}),'Name', ...
            sprintf('%s Muccocilliary Tranport for Drug (Dissolved)',nm), ...
            'ReactionRate',sprintf('%s_mu.drug/MTT_%s',nm,nm));
        addreaction(model, sprintf('%s_mu.particles -> %s',nm,pt_out{i}), ...
            'Name',sprintf(['%s Muccocilliary Tranport for Drug ' ...
            '(Particles)'],nm), 'ReactionRate', ...
            sprintf('%s_mu.particles/MTT_%s',nm,nm));
        addreaction(model, sprintf('%s_cell.drug -> null',nm),  ...
            'Name',sprintf('%s Lung Epithalial Clearance for Drug',nm), ...
            'ReactionRate',sprintf('CLint_%s_drug * %s_cell.drug',nm,nm));
        addreaction(model, sprintf('%s_cell.drug <-> %s.drug',nm,central), ...
            'Name',sprintf('%s Systemic Uptake for Drug',nm), ...
            'ReactionRate',sprintf(['SARC_drug*SA_%s*Th_%s*' ...
            '(fu_lungcell *%s_cell.drug - fup_drug * %s.drug)'], ...
            nm,nm,nm,central));
    end

    % Add exhaled drug
    addreaction(model,'Inhaled.particles -> null','Name', ...
        'Exhaled Drug Particles','ReactionRate', ...
        ['[(1-Dep_Nose-Dep_Extrathoracic-Dep_Thoracic-Dep_Bronchiolar-' ...
        'Dep_Alveolar) * k_inhale * Inhaled.particles']);
    addreaction(model,'Inhaled.solution -> null','Name', ...
        'Exhaled Drug Solution', 'ReactionRate', ...
        ['(1-Dep_Nose-Dep_Extrathoracic-Dep_Thoracic-Dep_Bronchiolar-' ...
        'Dep_Alveolar) * k_inhale * Inhaled.solution']);

    %Add equilibrium of rest of lung tissue - NEED TO CHANGE THIS TO
    % ACTUAL GASTROPLUS ALGORITHM
    addreaction(model,  sprintf('%s.drug <-> Lung.drug',central),'Name', ...
        'Lung Distribution for Drug','ReactionRate', ...
        sprintf('SARC * ( fup_drug * %s.drug -  fu_lungcell * Lung.drug)', ...
        central));

    %Assign collected tissue data
    addspecies(sbioselect(model,'type','compartment', ...
        'name','LungHomogenate'),  'drug', 'InitialAmount', 0, ...
        'InitialAmountUnits', nva.concunit);
    addspecies(sbioselect(model,'type','compartment','name','ELF'),             'drug', 'InitialAmount', 0, 'InitialAmountUnits', nva.concunit);
    addspecies(sbioselect(model,'type','compartment','name','ELF'),             'particles', 'InitialAmount', 0, 'InitialAmountUnits', nva.concunit);
    addspecies(sbioselect(model,'type','compartment','name','BAL'),             'drug', 'InitialAmount', 0, 'InitialAmountUnits', nva.concunit);
    addspecies(sbioselect(model,'type','compartment','name','GPPulmonary'),     'drug', 'InitialAmount', 0, 'InitialAmountUnits', nva.concunit);

    addrule(model, ['GPPulmonary.drug = (Alveolar_cell * ' ...
        'Alveolar_cell.drug + Bronchiolar_cell * Bronchiolar_cell.drug + ' ...
        'Thoracic_cell * Thoracic_cell.drug + (Alveolar_mu.drug + ' ...
        'Alveolar_mu.particles) * Alveolar_mu + (Bronchiolar_mu.drug + ' ...
        'Bronchiolar_mu.particles) * Bronchiolar_mu + (Thoracic_mu.drug + ' ...
        'Thoracic_mu.particles) * Thoracic_mu) / (LungHomogenate)'], ...
        'RuleType','repeatedAssignment');
    addrule(model, ['ELF.drug = (Alveolar_mu.drug * Alveolar_mu + ' ...
        'Bronchiolar_mu.drug * Bronchiolar_mu + Thoracic_mu.drug * ' ...
        'Thoracic_mu) / (Alveolar_mu + Thoracic_mu + Bronchiolar_mu)'], ...
        'RuleType','repeatedAssignment');
    addrule(model, ['ELF.particles = (Alveolar_mu.particles * Alveolar_mu +' ...
        ' Bronchiolar_mu.particles * Bronchiolar_mu + ' ...
        'Thoracic_mu.particles * Thoracic_mu) / (Alveolar_mu + ' ...
        'Thoracic_mu + Bronchiolar_mu)'], 'RuleType','repeatedAssignment');
    addrule(model, 'BAL.drug = ELF.drug + ELF.particles',                                                                      'RuleType','repeatedAssignment');
    addrule(model, ['LungHomogenate.drug = (Alveolar_cell * ' ...
        'Alveolar_cell.drug + Bronchiolar_cell * Bronchiolar_cell.drug +' ...
        ' Thoracic_cell * Thoracic_cell.drug + Lung * Lung.drug) ' ...
        '/ (LungHomogenate)'], 'RuleType','repeatedAssignment');
    %Lung tissue

    adddose(model,sbiodose('IH (particles)','Target','Inhaled.particles', ...
        'Amount',0,'AmountUnits',nva.doseunit,'TimeUnits','hour', ...
        'RateUnits',cat(2,nva.doseunit,'/hour')));
    adddose(model,sbiodose('IH (solution)', 'Target','Inhaled.solution', ...
        'Amount',0,'AmountUnits',optionsDoseUnit,'TimeUnits','hour', ...
        'RateUnits',cat(2,nva.doseunit,'/hour')));
end
end

function addDrugsToModel(model, nva)
if ~iscell(nva.drugs), nva.Drugs = {nva.drugs}; end
for i = 1:length(nva.drugs)
    addDrugToModel(model,nva);
    
    % In models with more than one drug, rename species and paramters to
    % something drug specific
    if length(nva.drugs) > 1 || nva.usetag
        
        drug    = nva.drugs{i};
        drug_sp = sbioselect(model.Species,'Name','drug');
        for j = 1:length(drug_sp), rename(drug_sp(j),drug); end
        
        part    = [nva.drugs{i} '_particles'];
        part_sp = sbioselect(model.Species,'Name','particles');
        for j = 1:length(part_sp), rename(part_sp(j),part); end
        
        d = getdose(model);
        for j = 1:length(d)
            tgt = d(j).TargetName;
            tgt = strsplit(tgt,'.');
            tgt = tgt{1};
            d(j).TargetName = cat(2,tgt,'.',drug);
            d(j).Name = cat(2,d(j).Name,'_',drug);
        end
        
        prm_tag = ['_' drug];
        rxn_tag = ['for ' drug];
    else
        prm_tag = '';
        rxn_tag = '';
    end
    
    params  = sbioselect(model.Parameters,'where','name','regexp','_drug');
    for j = 1:length(params)
        rename(params(j),strrep(params(j).Name,'_drug',prm_tag));
    end
    
    cmpt  = sbioselect(model.Compartments,'where','name','regexp','_drug');
    for j = 1:length(cmpt) 
        rename(cmpt(j),strrep(cmpt(j).Name,'_drug',prm_tag));
    end
    
    rxns    = sbioselect(model.Reactions,'where','name','regexp', ...
        'for Drug');
    for j = 1:length(rxns)
        rename(rxns(j),strrep(rxns(j).Name,'for Drug',rxn_tag));
    end
    
end

end

function addTransporter(model,transporter,nva)
warning('Transporter function untested')
disp(nva);
if length(transporter) > 1
    for i = 1: length(transporter)
        addTransporter(model,transporter(i));
    end
    return
end

if ~isfield(transporter,'Name')
    error(['Transporter must be a structure with the following ' ...
        'fields: Name, Location, Type, Direction']);
end
if ~isfield(transporter,'Location')
    error(['Transporter must be a structure with the following ' ...
        'fields: Name, Location, Type, Direction']);
end
if ~isfield(transporter,'Type')
    error(['Transporter must be a structure with the following' ...
        ' fields: Name, Location, Type, Direction']);
end
if ~isfield(transporter,'Direction')
    error(['Transporter must be a structure with the following ' ...
        'fields: Name, Location, Type, Direction']);
end

lu_cmpt = {'Nose','Extrathoracic','Thoracic','Bronchiolar','Alveolar'};
gi_cmpt = {'Stomach','Duodenum','Jejunum1','Jejunum2','Ileum1',...
    'Ileum2','Ileum3','Caecum','Colon'};
nm      = transporter.Name;

% TODO: Check  if the below code is used
% switch nva.pkmodel
%     case 'compartmental'
%         plasma = 'central.drug';
%         gut    = 'central.drug';
%     case 'pbpk'
%         plasma = 'Arterial.drug';
%         if sum(strcmpi(nva.prmlimited,'Gut'))
%             gut = 'Gut_ec.drug';
%         else
%             gut= 'Gut.drug';
%         end
% end


% Add rate constants
addparameter(model,sprintf('Vm_%s',nm),'Value',0, ...
    'ValueUnits','nanogram/second/nanogram');
addparameter(model,sprintf('Km_%s',nm),'Value',1, ...
    'ValueUnits','nanogram/milliliter');

switch lower(location)
    case 'pulmonary'
        for i = 1:length(lu_cmpt)
            exp = sprintf('Exp_%s_%s',name,lu_cmpt{i});
            % Name of expression parameter
            addparameter(model,exp,'Value',0,'ValueUnits','nanogram');
            switch lower(sprintf('%s_%s',type,direction))
                case 'apical_efflux'
                    addreaction(model, ...
                        sprintf('%s_cell.drug -> %s_mu.drug', ...
                        lu_cmpt{i},lu_cmpt{i}), ...
                        'Name', ...
                        sprintf('%s Transporter in %s for Drug', ...
                        nm,lu_cmpt{i}), 'ReactionRate', ...
                        sprintf(['%s * fu_lungcell_drug *%s_cell.drug ' ...
                        '* Vm_%s)/ (Km_%s  + fu_lungcell_drug' ...
                        ' * %s_cell.drug)'], ...
                        exp,lu_cmpt{i},nm,nm,lu_cmpt{i}));
                case 'apical_influx'
                    addreaction(model, ...
                        sprintf('%s_mu.drug -> %s_cell.drug', ...
                        lu_cmpt{i},lu_cmpt{i}), 'Name', ...
                        sprintf('%s Transporter in %s for Drug', ...
                        nm,lu_cmpt{i}), 'ReactionRate', ...
                        sprintf(['%s * fu_mucus_drug * %s_mu.drug ' ...
                        '* Vm_%s/ (Km_%s  + fu_mucus_drug * ' ...
                        '%s_mu.drug)'],exp,lu_cmpt{i},nm,nm, ...
                        lu_cmpt{i}));
                case 'basolateral_effulx'
                    addreaction(model, ...
                        sprintf('%s_cell.drug -> %s',lu_cmpt{i}, ...
                        plasma),'Name', ...
                        sprintf('%s Transporter in %s for Drug', ...
                        nm,lu_cmpt{i}),'ReactionRate', ...
                        sprintf(['%s * fu_lungcell_drug * ' ...
                        '%s_cell.drug * Vm_%s) / (Km_%s  + ' ...
                        'fu_lungcell_drug * %s_cell.drug'], ...
                        exp,lu_cmpt{i},nm,nm,lu_cmpt{i}));
                case 'basolateral_influx'
                    addreaction(model, sprintf('%s -> %s_cell.drug', ...
                        plasma,lu_cmpt{i}),'Name', ...
                        sprintf('%s Transporter in %s for Drug', ...
                        nm,lu_cmpt{i}), 'ReactionRate', ...
                        sprintf(['%s * fup_drug * %s * Vm_%s) ' ...
                        '/ (Km_%s  + fup_drug * %s_cell.drug)'], ...
                        exp,plasma,nm,nm,plasma));
                otherwise, error('Invalid transporter configuration')
            end
        end
    case 'gut'
        for i = 1:length(gi_cmpt)
            addparameter(model,sprintf('Exp_%s_%s', ...
                name,gi_cmpt{i}),'Value',0,'ValueUnits','nanogram');
            switch lower(sprintf('%s_%s',type,direction))
                case 'apical_efflux'
                case 'apical_influx'
                case 'basolateral_effulx'
                case 'basolateral_influx'
                otherwise, error('Invalid transporter configuration')
            end
        end
        error('Gut transporters not currently implemented')

    otherwise
        error('Invalid transporter location')
end

end

function performModelCleanup(model, nva)
[~,idx] = sort(get(model.Parameters,'Name'));  
reorder(model,model.Parameters(idx));
[~,idx] = sort(get(model.Compartment,'Name')); 
reorder(model,model.Compartment(idx));
[~,idx] = sort(get(model.Reactions,'Reaction'));
reorder(model,model.Reactions(idx));

switch lower(nva.pkmodel)
    case 'pbpk',            model.Name = 'PBPK';
    case 'compartmental',   model.Name = 'Compartmental PK';
    otherwise, error('Invalid PK model');
end

if nva.pulmonary, model.Name = sprintf('%s + Pulmonary',model.Name);
elseif  nva.acat, model.Name = sprintf('%s + ACAT',model.Name);
end


end