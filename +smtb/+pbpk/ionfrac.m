
function frac = ionfrac(acid,base,pH,logP,cbile)
% IONFRAC Function for calculating the ionization of charged 
% and bile-bound species using the 
% Mithani/Dressman/Avdeef et al. correlations and standard pKa
% partitioning calculations.
% frac = ionfrac(acid,base,pH)
% acid: a vector of acidic pKa's
% base: a vector of basic pKa's
% pH: pH for calculation the ionized fraction
% logP: logP octanol-water partition value for compound (input value only
%       required if considering bile binding)
% cbile:  concentration of bile in the target compartment(s) [mM]; 
%         input as column vector if multiple compartments  
%         (input value only required if considering bile binding)
%
%
% frac is a structure giving the following ionization details
% cationic:  fraction of species with net positive charge
% anionic:  fraction of species with net negative charge
% zwitterionic  fraction of species that is zwitterionic but 
% has a net charge of 0
% neutral  fraction of species with no charge (neutral)
% bile_bound:  fraction of species bound in bile micelles (charged or
%               uncharged)(only returned if cbile is input)
% F_all:  fraction of each ion species (only returned if not performing
%           bile calculation, i.e., cbile input not present)
% F_all_u: fraction of each unbound ion species 
% (returned if cbile is input)
% F_all_bb: fraction of each bile bound species 
% (returned if cbile is input)
% NetCharge: net charge of each species
% NumCharge: number of ionized charge sites
% X_all: fraction of each pKa ionized
% pKa: list of pKas in order of X_all
% type: type of pKa (acid/base) in order of X_all
% fc + fn + fa + fz + fbb =1

nobilecalc=false;

if ~exist('cbile','var')
    cbile=0;
    logP = 0;
    nobilecalc = true;
end



acid      = acid(:)';
base      = base(:)';
cbile = cbile(:)';
[pKa,idx] = sort([acid base]);
type      = [repmat({'acid'},1,length(acid)) ...
    repmat({'base'},1,length(base))];
type      = type(idx);

pHlen = length(pH);
cblen = length(cbile);
if cblen~=pHlen
    if cblen==1, cbile=repmat(cbile,1,pHlen);
    elseif pHlen==1, pH=repmat(pH,1,cblen);
    else , error(['Length of inputs pH and cbile must be equal ' ...
            '(same # compartments), or one or both must be of length 1.']);
    end
end

netcharge = length(base) - (0:length(pKa));

if ~isempty(pKa)
    numcharge = zeros(1,length(pKa));
    for i = 1:length(pKa), numcharge(i) = sum(acid<pKa(i)) +...
            sum(base>=pKa(i)); end
    numcharge = [numcharge sum(acid<pKa(end)) + sum(base>pKa(end))];
else
    numcharge = 0;
end

X_all     = zeros(2,length(netcharge)); 
% Ionization fraction; row 1 is for unbound species; 
% row 2 for bile-bound species
nbase     = length(base);


if length(pH) > 1
    for i = 1:length(pH)
        if nobilecalc
            frac(i) = smtb.pbpk.ionfrac(acid,base,pH(i));
        else
            frac(i) = smtb.pbpk.ionfrac(acid,base,pH(i),logP,cbile(i));
        end
    end
    return
end

% Determine if net zero charge state is neutral or zwitterionic
if isempty(base), zw_ion = 0;
else,             zw_ion = logical(sum(acid<max(base)));
end


%Calculate Kbm bile-partitioning coefficients for charged species
Kbm = zeros(1,length(netcharge));
for i = 1:length(netcharge)
    if netcharge(i) > 0, Kbm(i) = 10^(0.74*logP + 1.29);
    elseif netcharge(i) == 0, Kbm(i) = 10^(0.74*logP + 2.29);
    else, Kbm(i) = 10^(0.74*logP + 0.29);        
    end
end


%Calculate ion/bile-bound fraction (X) generated by each pKa
for i = 1:length(netcharge)
    if i <= nbase % terms before neutral, lose positive 
        % charge after deprotonation
        ip = nbase - i + 1;
        X_all(1,i) = 10^(sum(pKa(i:nbase)) - ip*pH);
    elseif i == nbase+1 %neutral term
        X_all(1,i) = 1;
    else % terms after neutral, gain negative charge after deprotonation
        np = i - nbase - 1;
        X_all(1,i) = 10^(np*pH - sum(pKa(nbase+1:i-1)));
    end
    X_all(2,i) = Kbm(i)*(cbile/1000)/55.5*X_all(1,i);
end

%Calculate ionization fraction with positive charge (Xfc)
fc = sum(X_all(1,1:nbase))/sum(sum(X_all));     
% Fraction of net positively charged, unbound ions (cationic)
fa = sum(X_all(1,nbase+2:end))/sum(sum(X_all)); 
% Fraction of net negatively charged, unbound ions (antionic)
fz = 1/sum(sum(X_all)) * zw_ion;                
% Fraction of zwitterionic unbound species
fn = 1/sum(sum(X_all)) * (1-zw_ion);            
% Fraction of neutral unbound species
fbb = sum(X_all(2,:)) / sum(sum(X_all));        
% Fraction of bile-bound species (any charge)

% idx   = find(netcharge == 0); REMOVED since unused
F_all = X_all ./ sum(sum(X_all));

if nobilecalc==true
    frac  = struct('pH',pH,'cationic',fc,'anionic',fa, ...
        'zwitterionic',fz,'neutral',fn,'NetCharge',netcharge, ...
        'NumCharge',numcharge,'F_all',F_all(1,:),'pKa',pKa,'type',{type});
else
    frac  = struct('pH',pH,'logP',logP,'cbile',cbile, ...
        'cationic',fc,'anionic',fa,'zwitterionic',fz, ...
        'neutral',fn,'bile_bound',fbb,'NetCharge', ...
        netcharge,'NumCharge',numcharge,'F_all_u',F_all(1,:), ...
        'F_all_bb',F_all(2,:),'pKa',pKa,'type',{type});
end

end