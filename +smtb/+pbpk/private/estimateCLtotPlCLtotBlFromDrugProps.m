function sp_input = estimateCLtotPlCLtotBlFromDrugProps(sp_input, ...
    species, dp, ii,allometry)
if (isempty(sp_input.CL_tot_pl) || isempty(sp_input.CL_tot_bl)) &&...
        ~strcmpi(sp_input.CL_source,'calculated from CLint')
    switch lower(strrep(strrep(strrep(sp_input.CL_source,' ',''),'_',''), ...
            '-',''))
        case {'userdefined','userdefined(blood)','userdefined(plasma)'}
            % do nothing
        case 'kate'
            if strcmpi(species{ii},'human')
                warning backtrace off
                warning(['Human clearance is not stored in KATE.' ...
                    ' Switching to LBF scaling.'])
                warning backtrace on
                if isempty(allometry.lbf)
                    warning(['No PK data for compound %s found in ' ...
                        'DrugProps for LBF scaling. Switching to IVIVE.'] ...
                        ,dp.name)
                    sp_input.CL_tot_bl = [];
                    sp_input.CL_tot_pl = [];
                    sp_input.CL_source = 'calculated from CLint';
                    sp_input.CLint_source = 'default';
                else
                    sp_alm = intersect({'monkey','dog','minipig','pig', ...
                        'rat','mouse'},{allometry.lbf.species},'stable');
                    sp_alm = sp_alm{1};

                    idx_a = strcmpi({allometry.single_allometry.species} ...
                        ,sp_alm) & ...
                        strcmpi({allometry.single_allometry.study}, ...
                        'summary') & ...
                        strcmpi({allometry.single_allometry.type}, ...
                        'non-restrictive');

                    sp_input.CL_tot_pl = allometry.single_allometry(idx_a ...
                        ).HuCLp_mLminkg;
                    sp_input.CL_source = sprintf('%s LBF non-restrictive', ...
                        sp_alm);
                end
            else
                [cl,cl_vals,matrix] = getInVivoClearance(dp,species{ii}, ...
                    'operation',calc_operation.pk,'study_design', ...
                    calc_operation.iv_data);
                if ~isempty(cl_vals)
                    if length(unique(matrix)) == 1
                        switch char(unique(matrix))
                            case 'blood'
                                sp_input.CL_tot_bl = cl;
                                sp_input.CL_tot_pl = [];
                            case 'plasma'
                                sp_input.CL_tot_pl = cl;
                                sp_input.CL_tot_bl = [];
                            otherwise
                                warning(['KATE clearance for species %s' ...
                                    ' not measured in blood or plasma.' ...
                                    ' Switchting to IVIVE.'],species{ii})
                                sp_input.CL_tot_bl = [];
                                sp_input.CL_tot_pl = [];
                                sp_input.CL_source = ['calculated from ' ...
                                    'CLint'];
                                sp_input.CLint_source = 'default';
                        end
                    else
                        cl_vals = cl_vals(strcmpi(matrix,'blood'));
                        switch strrep(strrep(strrep( ...
                                lower(calc_operation.pk),' ',''), ...
                                '_',''),'-','')
                            case 'geometricmean'
                                sp_input.CL_tot_bl = geomean(cl_vals);
                                sp_input.CL_tot_pl = [];
                            case {'arithmeticmean','average'}
                                sp_input.CL_tot_bl = mean(cl_vals);
                                sp_input.CL_tot_pl = [];
                            case 'median'
                                sp_input.CL_tot_bl = median(cl_vals);
                                sp_input.CL_tot_pl = [];
                        end
                        warning(['KATE clearance for species %s' ...
                            ' returned measurements in blood and plasma.' ...
                            ' Only blood clearance will be used.'], ...
                            species{ii})
                    end
                else
                    warning(['Clearance not found in KATE for species %s.' ...
                        ' Switching to IVIVE.'],species{ii})
                    sp_input.CL_source = 'calculated from CLint';
                end
            end
        case {'singleallometryres','singleallometrynonres',...
                'singleallometryresall','singleallometrynonresall',...
                'singleallometryresallspecies',...
                'singleallometrynonresallspecies'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only available ' ...
                    'for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.single_allometry)
                warning(['No PK data for compound %s found in' ...
                    ' DrugProps for allometric scaling. ' ...
                    'Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif contains(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'nonres')
                idx_a = strcmpi({allometry.single_allometry.species}, ...
                    'all') & strcmpi({allometry.single_allometry.study}, ...
                    'summary') & strcmpi({allometry.single_allometry.type}, ...
                    'non-restrictive');
                sp_input.CL_tot_pl = ...
                    allometry.single_allometry(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = ['all species single allometry' ...
                    ' non-restrictive'];
            else
                idx_a = strcmpi({allometry.single_allometry.species}, ...
                    'all') & strcmpi({allometry.single_allometry.study}, ...
                    'summary') & strcmpi({allometry.single_allometry.type}, ...
                    'restrictive');
                sp_input.CL_tot_pl = ...
                    allometry.single_allometry(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = ['all species single ' ...
                    'allometry restrictive'];
            end
        case {'singleallometryresrat','singleallometryresdog',...
                'singleallometryresminipig','singleallometryresmonkey',...
                'singleallometryresmouse'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only available ' ...
                    'for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.single_allometry)
                warning(['No PK data for compound %s found in' ...
                    ' DrugProps for allometric scaling.' ...
                    ' Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                sp_alm = sscanf(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'singleallometryres%s');
                if ~any(strcmpi({allometry.single_allometry.species}, ...
                        sp_alm))
                    % if there the requested species is not available,
                    % make selection
                    sp_alm = intersect({'monkey','dog','minipig', ...
                        'pig','rat','mouse'}, ...
                        {allometry.single_allometry.species},'stable');
                    sp_alm = sp_alm{1};
                end
                idx_a = strcmpi({allometry.single_allometry.species}, ...
                    sp_alm) & strcmpi({allometry.single_allometry.study}, ...
                    'summary') & ...
                    strcmpi({allometry.single_allometry.type}, ...
                    'restrictive');

                sp_input.CL_tot_pl = ...
                    allometry.single_allometry(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf('%s allometry restrictive', ...
                    sp_alm);
            end
        case {'singleallometrynonresrat','singleallometrynonresdog',...
                'singleallometrynonresminipig',...
                'singleallometrynonresmonkey','singleallometrynonresmouse'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only ' ...
                    'available for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.single_allometry)
                warning(['No PK data for compound %s found in DrugProps ' ...
                    'for allometric scaling. Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                sp_alm = sscanf(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'singleallometrynonres%s');
                if ~any(strcmpi({allometry.single_allometry.species}, ...
                        sp_alm))
                    % if there the requested species is not available,
                    % make selection
                    sp_alm = intersect({'monkey','dog','minipig','pig', ...
                        'rat','mouse'}, ...
                        {allometry.single_allometry.species},'stable');
                    sp_alm = sp_alm{1};
                end
                idx_a = strcmpi({allometry.single_allometry.species}, ...
                    sp_alm) & strcmpi({allometry.single_allometry.study}, ...
                    'summary') & ...
                    strcmpi({allometry.single_allometry.type}, ...
                    'non-restrictive');

                sp_input.CL_tot_pl = ...
                    allometry.single_allometry(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf(['%s allometry ' ...
                    'non-restrictive'],sp_alm);
            end
        case {'lbfresall','lbfnonresall','lbfresallspecies',...
                'lbfnonresallspecies'}
            if ~strcmpi(species{ii},'human')
                warning(['LBF scaling currently only available for human.' ...
                    ' Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.lbf)
                warning(['No PK data for compound %s found in ' ...
                    'DrugProps for allometric scaling. ' ...
                    'Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif contains(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'nonres')
                idx_a = strcmpi({allometry.lbf.species},'all') & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'non-restrictive');
                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = ['all species LBF scaling' ...
                    ' non-restrictive'];
            else
                idx_a = strcmpi({allometry.lbf.species},'all') & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'restrictive');
                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = 'all species LBF scaling restrictive';
            end
        case {'lbfres','lbfnonres'}
            if ~strcmpi(species{ii},'human')
                warning(['LBF scaling currently only available for human.' ...
                    ' Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.lbf)
                warning(['No PK data for compound %s found in DrugProps ' ...
                    'for allometric scaling. Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif contains(strrep(strrep(strrep(sp_input.CL_source,' ', ...
                    ''),'_',''),'-',''),'nonres')
                sp_alm = intersect({'monkey','dog','minipig','pig', ...
                    'rat','mouse'},{allometry.single_allometry.species}, ...
                    'stable');
                sp_alm = sp_alm{1};
                idx_a = strcmpi({allometry.lbf.species},sp_alm) & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'non-restrictive');
                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf(['%s LBF scaling ' ...
                    'non-restrictive'],sp_alm);
            else
                sp_alm = intersect({'monkey','dog','minipig','pig', ...
                    'rat','mouse'},{allometry.single_allometry.species}, ...
                    'stable');
                sp_alm = sp_alm{1};
                idx_a = strcmpi({allometry.lbf.species},sp_alm) & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'restrictive');
                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf(['%s LBF scaling ' ...
                    'restrictive'],sp_alm);
            end
        case {'lbfresrat','lbfresdog','lbfresminipig',...
                'lbfresmonkey','lbfresmouse'}
            if ~strcmpi(species{ii},'human')
                warning(['LBF scaling currently only available' ...
                    ' for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.lbf)
                warning(['No PK data for compound %s found ' ...
                    'in DrugProps for LBF scaling. ' ...
                    'Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                sp_alm = sscanf(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'lbfres%s');
                if ~any(strcmpi({allometry.single_allometry.species}, ...
                        sp_alm))
                    % if there the requested species is not available,
                    % make selection
                    sp_alm = intersect({'monkey','dog','minipig', ...
                        'pig','rat','mouse'}, ...
                        {allometry.single_allometry.species},'stable');
                    sp_alm = sp_alm{1};
                end
                idx_a = strcmpi({allometry.lbf.species},sp_alm) & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'restrictive');

                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf(['%s LBF scaling ' ...
                    'restrictive'],sp_alm);
            end
        case {'lbfnonresrat','lbfnonresdog','lbfnonresminipig',...
                'lbfnonresmonkey','lbfnonresmouse'}
            if ~strcmpi(species{ii},'human')
                warning(['LBF scaling currently only available ' ...
                    'for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            elseif isempty(allometry.lbf)
                warning(['No PK data for compound %s found' ...
                    ' in DrugProps for allometric scaling. ' ...
                    'Switching to IVIVE.'],dp.name)
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                sp_alm = sscanf(strrep(strrep(strrep(sp_input.CL_source, ...
                    ' ',''),'_',''),'-',''),'lbfnonres%s');
                if ~any(strcmpi({allometry.single_allometry.species}, ...
                        sp_alm))
                    % if there the requested species is not available,
                    % make selection
                    sp_alm = intersect({'monkey','dog','minipig','pig', ...
                        'rat','mouse'}, ...
                        {allometry.single_allometry.species},'stable');
                    sp_alm = sp_alm{1};
                end
                idx_a = strcmpi({allometry.lbf.species},sp_alm) & ...
                    strcmpi({allometry.lbf.study},'summary') & ...
                    strcmpi({allometry.lbf.type},'non-restrictive');

                sp_input.CL_tot_pl = allometry.lbf(idx_a).HuCLp_mLminkg;
                sp_input.CL_source = sprintf(['%s LBF scaling ' ...
                    'non-restrictive'],sp_alm);
            end
        case {'allometry','multispeciesallometry'}
            % this selects preferred method based on rules of exponents,
            % assumes res is preferred
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently ' ...
                    'only available for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                if ~isempty(allometry.multi_allometry)
                    idx_a = strcmpi({allometry.multi_allometry.parameter}, ...
                        'CL_mLminkg') & strcmpi( ...
                        {allometry.multi_allometry.type},'restrictive') & ...
                        [allometry.multi_allometry.preferred_cl_res];

                    sp_input.CL_tot_pl = ...
                        allometry.multi_allometry(idx_a).value_plasma;
                    sp_input.CL_source = sprintf(['%s allometry ' ...
                        'restrictive'], ...
                        allometry.multi_allometry(idx_a).method);
                else
                    if isempty(allometry.single_allometry)
                        warning(['No PK data for compound %s found ' ...
                            'in DrugProps for allometric scaling. ' ...
                            'Switching to IVIVE.'],dp.name)
                        sp_input.CL_tot_bl = [];
                        sp_input.CL_tot_pl = [];
                        sp_input.CL_source = 'calculated from CLint';
                        sp_input.CLint_source = 'default';
                    else
                        % select the preferred species
                        sp_alm = intersect({'monkey','dog','minipig', ...
                            'pig','rat','mouse'},...
                            {allometry.single_allometry.species},'stable');
                        idx_a = strcmpi( ...
                            {allometry.single_allometry.species}, ...
                            sp_alm{1}) & ...
                            strcmpi({allometry.single_allometry.type}, ...
                            'restrictive') & ...
                            strcmpi({allometry.single_allometry.study}, ...
                            'summary');

                        sp_input.CL_tot_pl =...
                            allometry.single_allometry(idx_a).HuCLp_mLminkg;
                        sp_input.CL_source = sprintf(['%s allometry ' ...
                            'restrictive'],sp_alm{1});
                    end
                end
            end
        case {'allometryres','multispeciesallometryres',...
                'allometrynonres','multispeciesallometrynonres'}
            % this selects preferred method based on rules of exponents,
            % res/non-res specified in the option
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently ' ...
                    'only available for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                if ~isempty(allometry.multi_allometry)
                    if contains(strrep(strrep(strrep(sp_input.CL_source, ...
                            '-',''),'_',''),' ',''),'nonres', ...
                            'IgnoreCase',true)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'non-restrictive') & ...
                            [allometry.multi_allometry.preferred_cl_nonres];

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = sprintf(['%s allometry ' ...
                            'non-restrictive'], ...
                            allometry.multi_allometry(idx_a).method);
                    else
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'restrictive') & ...
                            [allometry.multi_allometry.preferred_cl_res];

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = sprintf(['%s allometry ' ...
                            'restrictive'], ...
                            allometry.multi_allometry(idx_a).method);
                    end
                else
                    if isempty(allometry.single_allometry)
                        warning(['No PK data for compound %s found' ...
                            ' in DrugProps for allometric scaling.' ...
                            ' Switching to IVIVE.'],dp.name)
                        sp_input.CL_tot_bl = [];
                        sp_input.CL_tot_pl = [];
                        sp_input.CL_source = 'calculated from CLint';
                        sp_input.CLint_source = 'default';
                    else
                        % select the preferred species
                        sp_alm = intersect({'monkey','dog', ...
                            'minipig','pig','rat','mouse'}, ...
                            {allometry.single_allometry.species},'stable');
                        idx_a = strcmpi( ...
                            {allometry.single_allometry.species}, ...
                            sp_alm{1}) & ...
                            strcmpi({allometry.single_allometry.type}, ...
                            'restrictive') & ...
                            strcmpi({allometry.single_allometry.study}, ...
                            'summary');

                        sp_input.CL_tot_pl = ...
                            allometry.single_allometry(idx_a).HuCLp_mLminkg;
                        sp_input.CL_source = sprintf(['%s allometry ' ...
                            'restrictive'],sp_alm{1});
                    end
                end
            end
        case {'simpleallometryres','simpleallometrynonres'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only' ...
                    ' available for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                if contains(strrep(strrep(strrep(sp_input.CL_source, ...
                        '-',''),'_',''),' ',''),'nonres','IgnoreCase',true)
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'non-restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'simple');

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = ['simple allometry ' ...
                            'non-restrictive'];
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s' ...
                                ' found in DrugProps for allometric' ...
                                ' scaling. Switching to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog',...
                                'minipig','pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'non-restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry(idx_a ...
                                ).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry ' ...
                                'non-restrictive'],sp_alm{1});
                        end
                    end
                else
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'simple');

                        sp_input.CL_tot_pl = allometry.multi_allometry( ...
                            idx_a).value_plasma;
                        sp_input.CL_source = ['simple allometry ' ...
                            'restrictive'];
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s found' ...
                                ' in DrugProps for allometric scaling. ' ...
                                'Switching to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog','minipig', ...
                                'pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry( ...
                                idx_a).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry' ...
                                ' restrictive'],sp_alm{1});
                        end
                    end
                end
            end
        case {'brwallometryres','brwallometrynonres'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only ' ...
                    'available for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                if contains(strrep(strrep(strrep(sp_input.CL_source,'-', ...
                        ''),'_',''),' ',''),'nonres','IgnoreCase',true)
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'non-restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'brw');

                        sp_input.CL_tot_pl = allometry.multi_allometry( ...
                            idx_a).value_plasma;
                        sp_input.CL_source = ['BrW allometry ' ...
                            'non-restrictive'];
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s ' ...
                                'for allometric scaling. Switching ' ...
                                'to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog', ...
                                'minipig','pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'non-restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry(idx_a ...
                                ).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry' ...
                                ' non-restrictive'],sp_alm{1});
                        end
                    end
                else
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'brw');

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = 'BrW allometry restrictive';
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s ' ...
                                'found in DrugProps for allometric ' ...
                                'scaling. Switching to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog','minipig', ...
                                'pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry(idx_a ...
                                ).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry' ...
                                ' restrictive'],sp_alm{1});
                        end
                    end
                end
            end
        case {'mlpallometryres','mlpallometrynonres'}
            if ~strcmpi(species{ii},'human')
                warning(['Allometric scaling currently only available' ...
                    ' for human. Switching to IVIVE.'])
                sp_input.CL_tot_bl = [];
                sp_input.CL_tot_pl = [];
                sp_input.CL_source = 'calculated from CLint';
                sp_input.CLint_source = 'default';
            else
                if contains(strrep(strrep(strrep(sp_input.CL_source,'-', ...
                        ''),'_',''),' ',''),'nonres','IgnoreCase',true)
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi( ...
                            {allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'non-restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'mlp');

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = ['MLP allometry' ...
                            ' non-restrictive'];
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s ' ...
                                'found in DrugProps for allometric' ...
                                ' scaling. Switching to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog','minipig', ...
                                'pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'non-restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry(idx_a ...
                                ).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry' ...
                                ' non-restrictive'],sp_alm{1});
                        end
                    end
                else
                    if ~isempty(allometry.multi_allometry)
                        idx_a = strcmpi({ ...
                            allometry.multi_allometry.parameter}, ...
                            'CL_mLminkg') & ...
                            strcmpi({allometry.multi_allometry.type}, ...
                            'restrictive') & ...
                            strcmpi({allometry.multi_allometry.method}, ...
                            'mlp');

                        sp_input.CL_tot_pl = ...
                            allometry.multi_allometry(idx_a).value_plasma;
                        sp_input.CL_source = 'MLP allometry restrictive';
                    else
                        if isempty(allometry.single_allometry)
                            warning(['No PK data for compound %s found ' ...
                                'in DrugProps for allometric scaling. ' ...
                                'Switching to IVIVE.'],dp.name)
                            sp_input.CL_tot_bl = [];
                            sp_input.CL_tot_pl = [];
                            sp_input.CL_source = 'calculated from CLint';
                            sp_input.CLint_source = 'default';
                        else
                            % select the preferred species
                            sp_alm = intersect({'monkey','dog','minipig', ...
                                'pig','rat','mouse'}, ...
                                {allometry.single_allometry.species}, ...
                                'stable');
                            idx_a = strcmpi( ...
                                {allometry.single_allometry.species}, ...
                                sp_alm{1}) & ...
                                strcmpi({allometry.single_allometry.type}, ...
                                'restrictive') & ...
                                strcmpi({allometry.single_allometry.study}, ...
                                'summary');

                            sp_input.CL_tot_pl = ...
                                allometry.single_allometry(idx_a ...
                                ).HuCLp_mLminkg;
                            sp_input.CL_source = sprintf(['%s allometry' ...
                                ' restrictive'],sp_alm{1});
                        end
                    end
                end
            end
        case {'hepatocytes','microsomes','hurel',...
                'qsaradmetpredictormicrosomes',...
                'qsarmetintrinsicclearancehumanmicrosomes'}
            sp_input.CL_tot_pl = [];
            sp_input.CL_tot_bl = [];
            sp_input.CLint_source = sp_input.CL_source;
        otherwise
            error(['CL (clearance) source "%s" is not supported.' ...
                ' Check nomenclature to ensure proper source' ...
                ' is being used (e.g., use non-res instead ' ...
                'of non-restrictive).'],sp_input.CL_source)
    end

    % if a total plasma or blood clearance exists, calculate renal
    % filtration
    if (~isempty(sp_input.CL_tot_pl) || ~isempty(sp_input.CL_tot_bl))
        BW = inputs.Physiologies(strcmpi( ...
            {inputs.Physiologies.Species},species{ii})).Properties.Weight;
        gfr = [inputs.Physiologies(strcmpi( ...
            {inputs.Physiologies.Species},species{ii}) ...
            ).Tissues.GlomerularFiltrationRate] * 3600 / 1000;
        %GFR converted to L/hr
        switch lower(strrep(sp_input.RenalFiltration,' ',''))
            case 'fup*gfr', CLr = sp_input.fup * gfr;
            case 'gfr',     CLr = gfr;
            case 'off',     CLr = 0;
            case 'fraction*kidneybloodflow', CLr = 0;
                warning backtrace off
                warning(['Fraction*Kidney Blood Flow method ' ...
                    'not supported, renal filtration will be set to off'])
                warning backtrace on
            case 'userdefined'
                sp_input.CL_ren_pl = sp_input.CL_ren_pl * BW * (60 / 1000);
                % input is in mL/min/kg. convert to L/hr
                CLr = sp_input.CL_ren_pl;
                % define CLr for calculations below
            otherwise, error(['Unrecognized renal filtration ' ...
                    'method "%s"'],sp_input.RenalFiltration)
        end
    end

    if ~isempty(sp_input.CL_tot_pl) && ~isempty(sp_input.CL_tot_bl)
        warning backtrace off
        warning(['CL_tot_pl and CL_tot_bl defined for species %s. ' ...
            ' Total blood clearance will be used to ' ...
            'calculate CLint_u_Lhr'],species{ii})
        warning backtrace on
        % fuinc = 1 when total body clearance is defined
        sp_input.CLint_fuinc = 1;
        sp_input.fuinc_source = 'default';

        BW = inputs.Physiologies(strcmpi( ...
            {inputs.Physiologies.Species},species{ii})).Properties.Weight;
        lbf = inputs.Physiologies( ...
            strcmpi({inputs.Physiologies.Species},species{ii}) ...
            ).Tissues(strcmpi({inputs.Physiologies( ...
            strcmpi({inputs.Physiologies.Species},species{ii}) ...
            ).Tissues.Name},'Liver')).TissuePerfusion * 3600 / 1000;
        % units L/hr

        CLp_Lhr = min(lbf * sp_input.B2P,(sp_input.CL_tot_bl ...
            * sp_input.B2P * BW * (60 / 1000)) - CLr);
        if CLp_Lhr <= 0
            warning(['Estimated renal clearance is greater than' ...
                ' total in vivo clearance. Setting renal clearance' ...
                ' to zero.'])
            CLr = 0;
            CLp_Lhr = min(lbf * sp_input.B2P,( ...
                sp_input.CL_tot_pl * BW * (60 / 1000)) - CLr);
        end
        sp_input.CLint_u_Lhr = (CLp_Lhr * lbf * (sp_input.B2P ...
            / sp_input.adjusted_fup)) / ((sp_input.B2P*lbf) - CLp_Lhr);
    elseif isempty(sp_input.CL_tot_pl) && ~isempty(sp_input.CL_tot_bl)
        % fuinc = 1 when total body clearance is defined
        sp_input.CLint_fuinc = 1;
        sp_input.fuinc_source = 'default';

        BW = inputs.Physiologies(strcmpi({inputs.Physiologies.Species}, ...
            species{ii})).Properties.Weight;
        lbf = inputs.Physiologies(strcmpi({inputs.Physiologies.Species}, ...
            species{ii})).Tissues(strcmpi({inputs.Physiologies( ...
            strcmpi({inputs.Physiologies.Species},species{ii}) ...
            ).Tissues.Name},'Liver')).TissuePerfusion * 3600 / 1000;
        % units L/hr

        CLp_Lhr = min(lbf * sp_input.B2P,(sp_input.CL_tot_bl * ...
            sp_input.B2P * BW * (60 / 1000)) - CLr);
        if CLp_Lhr <= 0
            warning(['Estimated renal clearance is greater than total ' ...
                'in vivo clearance. Setting renal clearance to zero.'])
            CLr = 0;
            CLp_Lhr = min(lbf * sp_input.B2P,(sp_input.CL_tot_pl * BW * ...
                (60 / 1000)) - CLr);
        end
        sp_input.CLint_u_Lhr = (CLp_Lhr * lbf * (sp_input.B2P / ...
            sp_input.adjusted_fup)) / ((sp_input.B2P*lbf) - CLp_Lhr);
    elseif ~isempty(sp_input.CL_tot_pl) && isempty(sp_input.CL_tot_bl)
        % fuinc = 1 when total body clearance is defined
        sp_input.CLint_fuinc = 1;
        sp_input.fuinc_source = 'default';

        BW = inputs.Physiologies(strcmpi({inputs.Physiologies.Species}, ...
            species{ii})).Properties.Weight;
        lbf = inputs.Physiologies(strcmpi({inputs.Physiologies.Species}, ...
            species{ii})).Tissues(strcmpi({inputs.Physiologies(strcmpi( ...
            {inputs.Physiologies.Species},species{ii})).Tissues.Name}, ...
            'Liver')).TissuePerfusion * 3600 / 1000; % units L/hr

        CLp_Lhr = min(lbf * sp_input.B2P,(sp_input.CL_tot_pl * BW ...
            * (60 / 1000)) - CLr);
        if CLp_Lhr <= 0
            warning(['Estimated renal clearance is greater than total' ...
                ' in vivo clearance. Setting renal clearance to zero.'])
            CLr = 0;
            CLp_Lhr = min(lbf * sp_input.B2P,(sp_input.CL_tot_pl * BW ...
                * (60 / 1000)) - CLr);
        end
        sp_input.CLint_u_Lhr = (CLp_Lhr * lbf * (sp_input.B2P ...
            / sp_input.adjusted_fup)) / ((sp_input.B2P*lbf) - CLp_Lhr);
    end
end