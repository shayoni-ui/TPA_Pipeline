function sp_input = calculateCLintFromDrugProps(sp_input, species, dp, ...
    ii, calc_operation)

if ~isempty(dp) || strcmpi(sp_input.CLint_source, ...
        'User Defined')
    if ~isempty(sp_input.CLint_u_Lhr)
        if ~strcmpi(strrep(sp_input.CLint_source,' ',''),'default')
            warning backtrace off
            warning(['In vivo clearance entered as input for species %s.' ...
                '  In vitro CLint will be ignored'],species{ii})
            warning backtrace on
            sp_input.CLint_source = 'CLint calculated from in vivo CL';
        else
            sp_input.CLint_source = 'CLint calculated from in vivo CL';
        end
    else
        switch lower(strrep(strrep(sp_input.CLint_source,' ',''),'_',''))
            case 'default'
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp,'clint', ...
                    species{ii},sp_input.CLint_source,calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1))...
                        lower(clint_system(2:end)) ' '...
                        upper(sp_clint(1)) lower(sp_clint(2:end))...
                        ' ' '(' clint_source ')'];
                end
            case {'microsomes','microsome','microsomal',...
                    'microsomesonly','microsomeonly','microsomalonly'}
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp, ...
                    'clint',species{ii},'KATE microsomes', ...
                    calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1))...
                        lower(clint_system(2:end)) ' ' upper(sp_clint(1))...
                        lower(sp_clint(2:end)) ' ' '(' clint_source ')'];
                end
            case {'hepatocytesonly','hepatocyteonly','hepatocytes',...
                    'hepatocyte'}
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp, ...
                    'clint',species{ii},'KATE hepatocytes', ...
                    calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1))...
                        lower(clint_system(2:end)) ' ' upper(sp_clint(1))...
                        lower(sp_clint(2:end)) ' ' '(' clint_source ')'];
                end
            case 'hurel'
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp,...
                    'clint',species{ii},'KATE hurel',...
                    calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1))...
                        lower(clint_system(2:end)) ' ' upper(sp_clint(1))...
                        lower(sp_clint(2:end)) ' ' '(' clint_source ')'];
                end
            case {'admet','admetmicrosomes','admetmics',...
                    'qsaradmetmicrosomes','qsaradmetpredictormicrosomes',...
                    'qsaradmet'}
                switch lower(species{ii})
                    case {'human','rat'}
                        [clint_val,clint_source,sp_clint,~,...
                            clint_comments,clint_n,...
                            clint_system] = getPreferredValue(dp,'clint',...
                            species{ii},'QSAR ADMET',calc_operation.param);
                    otherwise
                        [clint_val,clint_source,sp_clint,~,...
                            clint_comments,clint_n,...
                            clint_system] = getPreferredValue(dp,'clint',...
                            'human','QSAR ADMET',calc_operation.param);
                end
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1))...
                        lower(clint_system(2:end)) ' ' ...
                        upper(sp_clint(1)) lower(sp_clint(2:end)) ...
                        ' ' '(' clint_source ')'];
                end
            case {'qsarmicrosomes','qsarmic','qsarmics',...
                    'qsarmetintrinsicclearance',...
                    'qsarmetintrinsicclearancehuman','qsarmetclint',...
                    'qsarmetclinthuman',...
                    'qsarmetintrinsicclearancehumanmicrosomes'}
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp,...
                    'clint microsomes','human',...
                    'QSAR Met_Intrinsic_Clearance',calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1)) ...
                        lower(clint_system(2:end)) ' ' ...
                        upper(sp_clint(1)) lower(sp_clint(2:end)) ...
                        ' ' '(' clint_source ')'];
                end
            case {'qsarratintrinsicclearanceclass',...
                    'qsardpsratintrinsicclearance','qsardpsratclint'}
                [clint_val,clint_source,sp_clint,~,clint_comments,...
                    clint_n,clint_system] = getPreferredValue(dp,...
                    'clint microsomes','rat',...
                    'QSAR Rat Intrinsic Clearance Class',...
                    calc_operation.param);
                sp_input.CLint = clint_val;
                sp_input.CLint_source_n = clint_n;
                sp_input.CLint_comments = clint_comments;
                if contains(clint_source,'QSAR','IgnoreCase',true)
                    sp_input.CLint_source = clint_source;
                else
                    sp_input.CLint_source = [upper(clint_system(1)) ...
                        lower(clint_system(2:end)) ' ' ...
                        upper(sp_clint(1)) lower(sp_clint(2:end)) ...
                        ' ' '(' clint_source ')'];
                end
            case 'userdefined' % Do nothing, already assigned
            case {'microsomes(kate)','hepatocytes(kate)',...
                    'unavailableinkate'} % handles input structures
            otherwise, error('Unrecognized CLint source "%s"', ...
                    sp_input.CLint_source)
        end
    end
elseif isempty(sp_input.CL_tot_pl) && isempty(sp_input.CL_tot_bl) &&...
        ~strcmpi(sp_input.CLint_source,'User Defined')
    error(['DrugProps is empty and cannot be used to find an ' ...
        'intrinsic clearance value. Specify total blood or plasma ' ...
        'clearance (mL/min/kg bodyweight)']);
end
end