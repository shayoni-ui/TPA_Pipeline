function [vnn,inputs] = buildSpeciesVariants(species,inputs, acatFlag)

% Option to add a tag to compund specific paramters so multiple compounds
% can be added ot the same model
if ~isempty(inputs.Tags), tag = ['_' inputs.Tags];
else,           tag = '';
end

[vnew, sp_input] = parameterizeDistribution(species,inputs, ...
    acatFlag);
%disp(vnew);
if ~acatFlag
    vnn = vnew;
    inputs.SpeciesSpecific(strcmpi({inputs.SpeciesSpecific.Species}, ...
        species)) = sp_input;
    return
end
%% Parameterize ACAT
acat = inputs.ACAT(strcmpi({inputs.ACAT.Species},species));
kbas_coeffs = inputs.kbas_coeffs;
if isempty(acat)
    acat = inputs.ACAT(strcmpi({inputs.ACAT.Species},'cynomologous'));
end
if isempty(acat)
    error('Unable to find ACAT parameters for species "%s"',species);
end

acat_abs = 1;
% if isa(m,'SimBiology.Model')
%     if ~isempty({m.Parameters(strcmpi({m.Parameters.Name}', ...
%             ['rho' tag])).Units})
%         rho_unit = m.Parameters(strcmpi({m.Parameters.Name}', ...
%             ['rho' tag])).Units;
%         sol_conc_unit = m.Parameters(strcmpi({m.Parameters.Name}', ...
%             ['solubility_Jejunum1' tag])).Units;
%     else
%         acat_abs = 0;
%     end
% elseif isa(m,'SimBiology.export.Model')
%     if ~isempty(char(unique({m.ValueInfo(strcmpi({m.ValueInfo.Name}, ...
%             ['rho' tag])).Units})))
%         rho_unit = char(unique({m.ValueInfo(strcmpi({m.ValueInfo.Name}, ...
%             ['rho' tag])).Units}));
%         sol_conc_unit = char(unique( ...
%             {m.ValueInfo(strcmpi({m.ValueInfo.Name}, ...
%             ['solubility_Jejunum1' tag])).Units}));
%     else
%         acat_abs = 0;
%     end
% end
if acat_abs
    % define Peff
    if isempty(inputs.Peff0)
        switch strrep(strrep(lower(inputs.Peff_source),' ',''),'_','')
            case {'admet','qsaradmet','default'}
                [inputs.Peff0,inputs.Peff_source] = ...
                    getPreferredValue(inputs.DrugProps,'Peff', ...
                    inputs.Peff_source);
            case 'userdefined' % do nothing
            otherwise
                warning(['Invalid Peff source %s.  ' ...
                    'Using default value instead.'],inputs.Peff_source);
        end
    end

    if strcmpi(inputs.ASF_method,'default')
        inputs.ASF_method = 'Opt LogD SAV 6.1';
    end

    %v = cell(length(acat), 1);
    vnn = SimBiology.Variant.empty(length(acat), 0);
    for i = 1:length(acat)
        %         v{i} = addModelVariant(sprintf('%s %s',species,acat(i).State), ...
        %             v_dist{2});
        vnn(i) = sbiovariant(sprintf('%s %s',species,acat(i).State));
        vnn(i).addcontent(vnew.Content);
        % Add lumen volume, tissue volume, transit time, ASF,
        % lumen solubility,
        % and lumn Deff
        asf = zeros(1,length(acat(i).Phys));
        sol = zeros(1,length(acat(i).Phys));
        P_para = zeros(1,length(acat(i).Phys));
        ASF_para = zeros(1,length(acat(i).Phys));
        kbas = zeros(1,length(acat(i).Phys));
        Deff_acat = zeros(1,length(acat(i).Phys));
        if isempty(inputs.mw) || inputs.mw == 0 || isnan(inputs.mw)
            inputs.SR = 0;
            inputs.SR_method = 'User Defined';
            warning('Cannot calculate SR without molecular weight');
        end
        if inputs.r_he == 0 || inputs.r_s == 0
            if ~isempty(inputs.DrugProps)
                r_he = inputs.DrugProps.descriptors(strcmpi( ...
                    {inputs.DrugProps.descriptors.type},'r_he')).value;
                r_s = inputs.DrugProps.descriptors(strcmpi( ...
                    {inputs.DrugProps.descriptors.type},'r_s')).value;
            else
                r_he = inputs.r_he;
                r_s = inputs.r_s;
            end
        else
            r_he = inputs.r_he;
            r_s = inputs.r_s;
        end


        % Set species Peff. Multiply by e-4 to convert
        % from 10^-4 cm/s to cm/s
        switch lower(species)
            case 'human'
                sp_input.Peff = inputs.Peff0 * 1E-4;
            case 'minipig'
                sp_input.Peff = inputs.Peff0 * 0.8560E-4;
            case {'cyno','monkey'}
                sp_input.Peff = inputs.Peff0 * 0.9856E-4;
            case {'beagle','dog'}
                sp_input.Peff = inputs.Peff0 * 2.7749E-4;
            case 'rat'
                sp_input.Peff = inputs.Peff0 * 0.2246E-4;
            case 'mouse'
                sp_input.Peff = inputs.Peff0 * 0.4801E-4;
            otherwise, error('Unrecognized species "%s"',species)
        end


        % TODO remove function calls. check condition in the
        % loop and setting inputs based on the condition
        % handles cases where no compound is given
        if isempty(inputs.DrugProps)
            sr = inputs.SR;
        elseif inputs.mw == 0 || isnan(inputs.mw)
            sr = 0;
            inputs.SR_method = 'MW is NaN or 0_assumed SR=0';
        else
            sr = inputs.SR;
        end

        for j = 1:length(acat(i).Phys)
            [asf(j),sol(j),Deff_acat(j),P_para(j),...
                ASF_para(j),SR,kbas(j),~] = calcGIprops( ...
                acat(i).Phys(j).Compartment,species, ...
                acat(i).State,'dp',inputs.DrugProps,...
                'logP',inputs.logP,'Acidic_pKa',inputs.Acidic_pKa, ...
                'Basic_pKa',inputs.Basic_pKa, ...
                'ASF_method',inputs.ASF_method, ...
                'bio_sol',inputs.bio_sol, ...
                'Deff',inputs.Deff,'SR',sr,'SF',inputs.SF, ...
                'mw',inputs.mw,'Deff_method',inputs.Deff_method, ...
                'SR_method',inputs.SR_method,'r_he',r_he,'r_s',r_s, ...
                'Peff',sp_input.Peff,'RefSol',inputs.sol_mgmL, ...
                'RefSolpH',inputs.sol_pH,'ACAT',acat, ...
                'kbas_coeffs',kbas_coeffs, ...
                'para_model',inputs.para_abs);
        end

        % Add precipitation time. Currently fixed, will add input option
        %         v{i} = addVariantContent(v{i},{'parameter',['t_precip' tag], ...
        %             'Value',900});
        vnn(i).addcontent({'parameter',['t_precip' tag], ...
            'Value',900});

        for j = 1:length(acat(i).Phys)
            switch lower(acat(i).Phys(j).Compartment)
                case 'stomach'
                    %                     v{i} = addVariantContent(v{i},{'compartment', ...
                    %                         acat(i).Phys(j).Compartment, ...
                    %                         'Capacity',acat(i).Phys(j).Volume + ...
                    %                         sp_input.dose_vol});
                    vnn(i).addcontent({'compartment', ...
                        acat(i).Phys(j).Compartment, ...
                        'Capacity',acat(i).Phys(j).Volume + ...
                        sp_input.dose_vol});
                otherwise
                    %                     v{i} = addVariantContent(v{i},{'compartment', ...
                    %                         acat(i).Phys(j).Compartment, ...
                    %                         'Capacity',acat(i).Phys(j).Volume});
                    vnn(i).addcontent({'compartment', ...
                        acat(i).Phys(j).Compartment, ...
                        'Capacity',acat(i).Phys(j).Volume});
            end

            vnn(i).addcontent({'compartment', ...
                [acat(i).Phys(j).Compartment '_ent'],  ...
                'Capacity', acat(i).Phys(j).Enterocytes});
            vnn(i).addcontent({'parameter',  ...
                ['TT_' acat(i).Phys(j).Compartment], ...
                'Value', acat(i).Phys(j).TransitTime});
            vnn(i).addcontent({'parameter',  ...
                ['ASF_' acat(i).Phys(j).Compartment tag],  ...
                'Value',    asf(j)});
            vnn(i).addcontent({'parameter', ...
                ['Deff_' acat(i).Phys(j).Compartment tag],     ...
                'Value',    Deff_acat(j)});
            vnn(i).addcontent({'parameter', ...
                ['ASF_para_' acat(i).Phys(j).Compartment tag], ...
                'Value',    ASF_para(j)});
            vnn(i).addcontent({'parameter', ...
                ['k_bas_' acat(i).Phys(j).Compartment tag],  ...
                'Value',    kbas(j)});
            vnn(i).addcontent({'parameter', ...
                ['solubility_' acat(i).Phys(j).Compartment tag], ...
                'Value',    sol(j)});
        end
        vnn(i).addcontent({'parameter', ...
            'rho','Value',1.2});
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i},{'compartment', ...
        %                 [acat(i).Phys(j).Compartment '_ent'],  ...
        %                 'Capacity', acat(i).Phys(j).Enterocytes});
        % %         end
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i},{'parameter',  ...
        %                 ['TT_' acat(i).Phys(j).Compartment], ...
        %                 'Value', acat(i).Phys(j).TransitTime});
        %         end
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i}, ...
        %                 {'parameter',  ['ASF_' acat(i).Phys(j).Compartment tag],  ...
        %                 'Value',    asf(j)});
        %         end
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i},{'parameter', ...
        %                 ['Deff_' acat(i).Phys(j).Compartment tag],     ...
        %                 'Value',    Deff_acat(j)});
        %         end
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i},{'parameter', ...
        %                 ['ASF_para_' acat(i).Phys(j).Compartment tag], ...
        %                 'Value',    ASF_para(j)});
        %         end
        %         for j = 1:length(acat(i).Phys)
        %             v{i} = addVariantContent(v{i},{'parameter', ...
        %                 ['k_bas_' acat(i).Phys(j).Compartment tag],  ...
        %                 'Value',    kbas(j)});
        %
        %         end

        %         for j = 1:length(acat(i).Phys)
        %             switch lower(sol_conc_unit)
        %                 case 'milligram/milliliter'
        %                     v{i} = addVariantContent(v{i},{'parameter', ...
        %                         ['solubility_' acat(i).Phys(j).Compartment tag], ...
        %                         'Value',    sol(j)});
        %                 case 'micromole/liter'
        %                      v{i} = addVariantContent(v{i},{'parameter',  ...
        %                          ['solubility_' acat(i).Phys(j).Compartment tag], ...
        %                          'Value',    sol(j) * (1e6/inputs.mw)});
        %                 otherwise
        %                     error(['Invalid solubility unit in PBPK model. ' ...
        %                         'Must be milligram/milliliter or micromole/liter']);
        %             end
        %         end

        %         switch lower(rho_unit)
        %             case 'mole/milliliter'
        %                 v{i} = addVariantContent(v{i},{'parameter', ...
        %                     'rho','Value',(1.2/inputs.mw)});
        %                 % currently hard-coded. will updated to optional input later
        %             case 'gram/milliliter' % do nothing
        %                 v{i} = addVariantContent(v{i},{'parameter', ...
        %                     'rho','Value',1.2}); % currently hard-coded.
        %                 % will updated to optional input later
        %             otherwise
        %                 error(['Invalid particle density unit in PBPK model.' ...
        %                     ' Must be gram/milliliter or mole/milliliter']);
        %         end
        % Set transcellular and paracellular Peff
        for j = 1:length(acat(i).Phys)
            switch lower(inputs.para_abs)
                case {'on','zhimin','adson'}
                    %                     v{i} = addVariantContent(v{i},{'parameter', ...
                    %                         ['Peff_para_' acat(i).Phys(j).Compartment tag], ...
                    %                         'Value',P_para(j)});
                    vnn(i).addcontent({'parameter', ...
                        ['Peff_para_' acat(i).Phys(j).Compartment tag], ...
                        'Value',P_para(j)});
                    %                     v{i} = addVariantContent(v{i},{'parameter', ...
                    %                         ['Peff_trans_' acat(i).Phys(j).Compartment tag], ...
                    %                         'Value',max(sp_input.Peff - P_para(j),0)});
                    vnn(i).addcontent({'parameter', ...
                        ['Peff_trans_' acat(i).Phys(j).Compartment tag], ...
                        'Value',max(sp_input.Peff - P_para(j),0)});
                otherwise  % Set Peff_para to zero, Peff_trans to Peff
                    %                     v{i} = addVariantContent(v{i},{'parameter', ...
                    %                         ['Peff_para_' acat(i).Phys(j).Compartment tag], ...
                    %                         'Value',0});
                    vnn(i).addcontent({'parameter', ...
                        ['Peff_para_' acat(i).Phys(j).Compartment tag], ...
                        'Value',0});
                    %                     v{i} = addVariantContent(v{i},{'parameter', ...
                    %                         ['Peff_trans_' acat(i).Phys(j).Compartment tag], ...
                    %                         'Value',sp_input.Peff});
                    vnn(i).addcontent({'parameter', ...
                        ['Peff_trans_' acat(i).Phys(j).Compartment tag], ...
                        'Value',sp_input.Peff});
            end
        end

        if isempty(sp_input.Peff), sp_input.Peff = 0; end
        %         v{i} = addVariantContent(v{i},{'parameter',['Peff' tag], ...
        %             'Value',sp_input.Peff});
        vnn(i).addcontent({'parameter',['Peff' tag], ...
            'Value',sp_input.Peff});
        %         v{i} = addVariantContent(v{i},{'parameter',['Deff' tag], ...
        %             'Value',inputs.Deff});
        vnn(i).addcontent({'parameter',['Deff' tag], ...
            'Value',inputs.Deff});
        %         v{i} = addVariantContent(v{i},{'parameter',['r' tag], ...
        %             'Value',inputs.r});
        vnn(i).addcontent({'parameter',['r' tag], ...
            'Value',inputs.r});
        %         v{i} = addVariantContent(v{i},{'parameter',['h_max' tag], ...
        %             'Value',inputs.h_max});
        vnn(i).addcontent({'parameter',['h_max' tag], ...
            'Value',inputs.h_max});
    end
    inputs.SR = SR;
else
    %v{1} = addModelVariant(species,v_dist{2});
end
%% Parameterize pulmonary tissues
% if inputs.Pulmonary
%     load('GastroPlusPhysiology.mat','pulm')
%     pulm = pulm(strcmpi({pulm.Species},species));
%     if ~isempty(pulm)
%         for i = 1:length(v)
%             v{i} = addVariantContent(v{i},{'parameter','fu_mucus',   ...
%                 'Value',1});
%             v{i} = addVariantContent(v{i},{'parameter','fu_lungcell', ...
%                 'Value',1});
%
%             % Calculate SARC = 99.817 * Lung Volume/1126 * B2P / Kp,
%             % lukacova)/1126
%             Kp_luc = smtb.pbpk.getCompoundKP(inputs.DrugProps,species,'B2P', ...
%                 sp_input.B2P,'logP',inputs.logP,'fup',sp_input.fup);
%             Kp_lung_lukacova = Kp_luc.Kp(strcmpi({Kp_luc.Kp.Tissue}, ...
%                 'Lung')).Kp;
%             lng_vol = sum([pulm.Compartments(3:end).tis_vol]);
%             % need to check two equations below
%             sarc = (99.812 * lng_vol/1126 *sp_input.B2P ...
%                 /Kp_lung_lukacova)/1126;
%             v{i} = addVariantContent(v{i},{'parameter','SARC', ...
%                 'Value',sarc});
%
%             % Calculate permeablity from molecular weight
%             P = zeros(5,1);
%             r = 0.8 + 0.2207*sqrt(inputs.DrugProps.mw);
%             % Molecular radius in angstroms, eq 4-33 in Gastroplus manual
%             P(5) = exp(1.544*(r/10)^-0.935)/1E5;
%             % Alveolar permeaiblity, cm/s
%             P  = P(5) * pulm.Compartments(5).cell_th ./ ...
%                 [pulm.Compartments.cell_th];
%
%             nm = {'Nose','Extrathoracic','Thoracic',...
%                 'Bronchiolar','Alveolar'};
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'compartment', ...
%                     [nm{j} '_mu'], 'Capacity', ...
%                     pulm.Compartments(j).mu_th * ...
%                     pulm.Compartments(j).SA});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'compartment', ...
%                     [nm{j} '_cell'], 'Capacity', ...
%                     pulm.Compartments(j).cell_th * ...
%                     pulm.Compartments(j).SA});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i}, ...
%                     {'parameter',  ['MTT_' nm{j}], 'Value', ...
%                     pulm.Compartments(j).MTT});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'parameter',  ...
%                     ['SA_' nm{j}], 'Value',   pulm.Compartments(j).SA});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'parameter', ...
%                     ['Th_' nm{j}], 'Value',  ...
%                     pulm.Compartments(j).cell_th});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'parameter', ...
%                     ['Prm_' nm{j} tag], 'Value',   P(j)});
%             end
%             for j = 1:length(pulm.Compartments)
%                 v{i} = addVariantContent(v{i},{'parameter', ...
%                     ['Dep_' nm{j} tag], 'Value',   0});
%             end
%         end
%     end
% end
inputs.SpeciesSpecific(strcmpi({inputs.SpeciesSpecific.Species}, ...
    species)) = sp_input;
end

